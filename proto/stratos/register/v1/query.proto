syntax = "proto3";
package stratos.register.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/staking/v1beta1/staking.proto";

import "stratos/register/v1/register.proto";

option go_package = "github.com/stratosnet/stratos-chain/x/register/types";

// Query defines the gRPC querier service.
service Query {
  // ResourceNode queries ResourceNode info for given ResourceNode address.
  rpc ResourceNode(QueryResourceNodeRequest) returns (QueryResourceNodeResponse) {
    option (google.api.http).get = "/stratos/register/v1/resource-nodes/{network_addr}";
  }

  // MetaNode queries MetaNode info for given MetaNode address.
  rpc MetaNode(QueryMetaNodeRequest) returns (QueryMetaNodeResponse) {
    option (google.api.http).get = "/stratos/register/v1/meta-nodes/{network_addr}";
  }

  // Params queries Register module Params info.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/stratos/register/v1/params";
  }

  // StakeByNode queries all staking info for given node network address.
  rpc StakeByNode(QueryStakeByNodeRequest) returns (QueryStakeByNodeResponse) {
    option (google.api.http).get = "/stratos/register/v1/stakes_node/{network_addr}/{query_type}";
  }

  // StakeByOwner queries all staking info for given owner address.
  rpc StakeByOwner(QueryStakeByOwnerRequest) returns (QueryStakeByOwnerResponse) {
    option (google.api.http).get = "/stratos/register/v1/stakes_owner/{owner_addr}";
  }

  // StakeTotal queries all staking info.
  rpc StakeTotal(QueryTotalStakeRequest) returns (QueryTotalStakeResponse) {
    option (google.api.http).get = "/stratos/register/v1/total_stakes";
  }

  // BondedResourceNodeCount queries total number of ResourceNodes.
  rpc BondedResourceNodeCount(QueryBondedResourceNodeCountRequest) returns (QueryBondedResourceNodeCountResponse) {
    option (google.api.http).get = "/stratos/register/v1/pp_number";
  }

  // BondedMetaNodeCount queries total number of MetaNodes.
  rpc BondedMetaNodeCount(QueryBondedMetaNodeCountRequest) returns (QueryBondedMetaNodeCountResponse) {
    option (google.api.http).get = "/stratos/register/v1/sp_number";
  }
}

// QueryResourceNodeRequest is request type for the Query/ResourceNode RPC method
message QueryResourceNodeRequest {
  // network_addr defines the node network address to query for.
  string network_addr = 1;
}

// QueryResourceNodeResponse is response type for the Query/ResourceNode RPC method
message QueryResourceNodeResponse {
  // node defines the the resourceNode info.
  ResourceNode node = 1;
}

// QueryMetaNodeRequest is request type for the Query/MetaNode RPC method
message QueryMetaNodeRequest {
  // network_addr defines the node network address to query for.
  string network_addr = 1;
}

// QueryMetaNodeResponse is response type for the Query/MetaNode RPC method
message QueryMetaNodeResponse {
  // node defines the the meta info.
  MetaNode node = 1;
}

// QueryStakeByNodeRequest is request type for the Query/StakeByNode RPC method
message QueryStakeByNodeRequest {
  // network_addr defines the node network address to query for.
  string network_addr     = 1;
  uint32  query_type   = 2;
}

// QueryStakeByNodeResponse is response type for the Query/StakeByNode RPC method
message QueryStakeByNodeResponse {
  // staking_info defines the the staking_info info of the node.
  StakingInfo staking_info = 1;
}

// QueryStakeByOwnerRequest is request type for the Query/StakeByOwner RPC method
message QueryStakeByOwnerRequest {
  // owner_addr defines the owner address to query for.
  string              owner_addr = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryStakeByOwnerResponse is response type for the Query/StakeByOwner RPC method
message QueryStakeByOwnerResponse {
  // staking_infos defines the the node staking info of this owner.
  repeated StakingInfo staking_infos = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryTotalStakeRequest is request type for the Query/TotalStake RPC method
message QueryTotalStakeRequest {}

// QueryTotalStakeResponse is response type for the Query/TotalStake RPC method
message QueryTotalStakeResponse {
  // total_stakes defines the total staking info.
  TotalStakesResponse total_stakes= 1;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1;
}

// QueryBondedResourceNodeCountRequest is request type for the Query/BondedResourceNodeCount RPC method.
message QueryBondedResourceNodeCountRequest {}

// QueryBondedResourceNodeCountResponse is response type for the Query/BondedResourceNodeCount RPC method.
message QueryBondedResourceNodeCountResponse {
  // number holds the total number of resource nodes.
  uint64 number = 1;
}

// QueryBondedMetaNodeCountRequest is request type for the Query/MetaNodeNumber RPC method.
message QueryBondedMetaNodeCountRequest {}

// QueryBondedMetaNodeCountResponse is response type for the Query/MetaNodeNumber RPC method.
message QueryBondedMetaNodeCountResponse {
  // number holds the total number of meta nodes.
  uint64 number = 1;
}

message TotalStakesResponse {
  cosmos.base.v1beta1.Coin resource_nodes_total_stake = 1;
  cosmos.base.v1beta1.Coin meta_nodes_total_stake = 2;
  cosmos.base.v1beta1.Coin total_bonded_stake = 3;
  cosmos.base.v1beta1.Coin total_unbonded_stake = 4;
  cosmos.base.v1beta1.Coin total_unbonding_stake = 5;
}

message StakingInfo {
  string                              network_address = 1 [
    (gogoproto.jsontag) = "network_address",
    (gogoproto.moretags) = "yaml:\"network_address\""
  ];
  google.protobuf.Any                 pubkey = 2 [
    (cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey",
    (gogoproto.jsontag) = "pubkey",
    (gogoproto.moretags) = "yaml:\"pubkey\""
  ];
  bool                                suspend = 3 [
    (gogoproto.jsontag) = "suspend",
    (gogoproto.moretags) = "yaml:\"suspend\""
  ];
  cosmos.staking.v1beta1.BondStatus   status = 4 [
    (gogoproto.jsontag) = "status",
    (gogoproto.moretags) = "yaml:\"status\""];
  string                              tokens = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "tokens",
    (gogoproto.moretags) = "yaml:\"tokens\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"
  ];
  string                              owner_address = 6 [
    (gogoproto.jsontag) = "owner_address",
    (gogoproto.moretags) = "yaml:\"owner_address\""
  ];
  Description                         description = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "description",
    (gogoproto.moretags) = "yaml:\"description\""
  ];
  google.protobuf.Timestamp           creation_time = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true,
    (gogoproto.jsontag) = "creation_time",
    (gogoproto.moretags) = "yaml:\"creation_time\""
  ];
  uint32                              node_type = 9 [
    (gogoproto.jsontag) = "node_type",
    (gogoproto.moretags) = "yaml:\"node_type\""
  ];
  cosmos.base.v1beta1.Coin            bonded_stake = 10 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "bonded_stake",
    (gogoproto.moretags) = "yaml:\"bonded_stake\""
  ];
  cosmos.base.v1beta1.Coin            un_bonding_stake = 11 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "un_bonding_stake",
    (gogoproto.moretags) = "yaml:\"un_bonding_stake\""
  ];
  cosmos.base.v1beta1.Coin            un_bonded_stake = 12 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "un_bonded_stake",
    (gogoproto.moretags) = "yaml:\"un_bonded_stake\""
  ];
}
