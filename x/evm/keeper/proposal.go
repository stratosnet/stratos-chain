package keeper

import (
	"bytes"
	"fmt"
	"math"
	"math/big"

	errorsmod "cosmossdk.io/errors"
	sdkmath "cosmossdk.io/math"
	sdk "github.com/cosmos/cosmos-sdk/types"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/params"

	stratos "github.com/stratosnet/stratos-chain/types"
	"github.com/stratosnet/stratos-chain/x/evm/statedb"
	"github.com/stratosnet/stratos-chain/x/evm/tracers"
	"github.com/stratosnet/stratos-chain/x/evm/types"
	"github.com/stratosnet/stratos-chain/x/evm/vm"
)

var (
	emptyCodeHash = crypto.Keccak256Hash(nil)
)

type MigratableContract struct {
	Address common.Address
	Bin     string
	Init    string
}

type ProposalCounsil struct {
	keeper         *Keeper
	ctx            sdk.Context
	stateDB        *statedb.StateDB
	evm            *vm.EVM
	consensusOwner common.Address
	proxyOwner     common.Address
	verifier       *vm.GenesisContractVerifier
}

func NewProposalCounsil(k *Keeper, ctx sdk.Context) (*ProposalCounsil, error) {
	pc := &ProposalCounsil{
		keeper:         k,
		ctx:            ctx,
		consensusOwner: vm.ConsensusAddress,
		proxyOwner:     vm.ProxyOwnerAddress,
		verifier:       k.verifier,
	}
	cfg, err := k.EVMConfig(ctx)
	if err != nil {
		return nil, errorsmod.Wrap(err, "failed to load evm config")
	}

	blockCtx := vm.BlockContext{
		CanTransfer:        vm.CanTransfer,
		Transfer:           vm.Transfer,
		GetHash:            k.GetHashFn(ctx),
		ParseProtoFromData: k.ParseProtoFromDataFn(ctx),
		Coinbase:           cfg.CoinBase,
		GasLimit:           stratos.BlockGasLimit(ctx),
		BlockNumber:        big.NewInt(ctx.BlockHeight()),
		Time:               big.NewInt(ctx.BlockHeader().Time.Unix()),
		Difficulty:         big.NewInt(0), // unused. Only required in PoW context
		BaseFee:            cfg.BaseFee,
	}

	txCtx := vm.TxContext{
		Origin:   pc.consensusOwner,
		GasPrice: big.NewInt(0),
	}
	tracer := tracers.NewNoOpTracer()
	vmConfig := k.VMConfig(ctx, cfg, tracer)

	txConfig := statedb.NewEmptyTxConfig(common.BytesToHash(ctx.HeaderHash()))
	pc.stateDB = statedb.New(ctx, pc.keeper, txConfig)
	pc.evm = vm.NewEVM(blockCtx, txCtx, pc.stateDB, cfg.ChainConfig, vmConfig, pc.verifier)

	return pc, nil
}

func (pc *ProposalCounsil) finalize() error {
	if err := pc.stateDB.Commit(); err != nil {
		return err
	}
	return nil
}

func (pc *ProposalCounsil) call(sender, contractAddress common.Address, data []byte, value *big.Int) error {
	// required
	txCtx := vm.TxContext{
		Origin:   sender,
		GasPrice: big.NewInt(0),
	}
	pc.evm.Reset(txCtx, pc.stateDB)

	nonce := pc.stateDB.GetNonce(sender)
	// we do not care about gas during consil execution
	gas := uint64(math.MaxUint64)
	// for safety
	if value == nil {
		value = big.NewInt(0)
	}

	{
		pc.stateDB.SetNonce(sender, nonce+1)
	}

	if _, _, vmErr := pc.evm.Call(vm.AccountRef(sender), contractAddress, data, gas, value); vmErr != nil {
		return vmErr
	}
	return nil
}

func (pc *ProposalCounsil) create(sender, contractAddress common.Address, data []byte, value *big.Int) (*common.Address, error) {
	// required
	txCtx := vm.TxContext{
		Origin:   sender,
		GasPrice: big.NewInt(0),
	}
	pc.evm.Reset(txCtx, pc.stateDB)

	nonce := pc.stateDB.GetNonce(sender)
	// we do not care about gas during consil execution
	gas := uint64(math.MaxUint64)

	// for safety
	if value == nil {
		value = big.NewInt(0)
	}

	interpreter := vm.NewEVMInterpreter(pc.evm, pc.evm.Config)

	accRef := vm.AccountRef(sender)

	{
		pc.stateDB.SetNonce(accRef.Address(), nonce+1)
	}

	contractHash := pc.evm.StateDB.GetCodeHash(contractAddress)
	if pc.evm.StateDB.GetNonce(contractAddress) != 0 || (contractHash != (common.Hash{}) && contractHash != emptyCodeHash) {
		return nil, vm.ErrContractAddressCollision
	}

	snapshot := pc.evm.StateDB.Snapshot()

	pc.evm.StateDB.CreateAccount(contractAddress)
	pc.evm.StateDB.SetNonce(contractAddress, 1)
	pc.evm.Context.Transfer(pc.evm.StateDB, sender, contractAddress, value)

	contract := vm.NewContract(accRef, vm.AccountRef(contractAddress), value, gas)
	contract.SetCallCode(&contractAddress, common.Hash{}, data)

	ret, err := interpreter.Run(contract, nil, false)
	if err != nil {
		return nil, err
	}

	// Check whether the max code size has been exceeded, assign err if the case.
	if err == nil && len(ret) > params.MaxCodeSize {
		err = vm.ErrMaxCodeSizeExceeded
	}

	// Reject code starting with 0xEF if EIP-3541 is enabled.
	if err == nil && len(ret) >= 1 && ret[0] == 0xEF {
		err = vm.ErrInvalidCode
	}

	// if the contract creation ran successfully and no errors were returned
	// calculate the gas required to store the code. If the code could not
	// be stored due to not enough gas set an error and let it be handled
	// by the error checking condition below.
	if err == nil {
		createDataGas := uint64(len(ret)) * params.CreateDataGas
		if contract.UseGas(createDataGas) {
			pc.evm.StateDB.SetCode(contractAddress, ret)
		} else {
			err = vm.ErrCodeStoreOutOfGas
		}
	}

	// When an error was returned by the EVM or when setting the creation code
	// above we revert to the snapshot and consume any gas remaining. Additionally
	// when we're in homestead this also counts for code storage gas errors.
	if err != nil {
		pc.evm.StateDB.RevertToSnapshot(snapshot)
		if err != vm.ErrExecutionReverted {
			contract.UseGas(contract.Gas)
		}
	}

	return &contractAddress, nil
}

// Migrate1to2 for initialize contract on v0.12
func (pc *ProposalCounsil) Migrate1to2() error {
	contracts := []*MigratableContract{
		{
			Address: vm.SystemContractAddress,
			Bin:     "0x60806040523461001a5760405161188d610020823961188d90f35b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806301ffc9a71461016b578063082ffa8c146101665780631ea0ab5714610161578063248a9ca31461015c5780632f2ff15d1461015757806336568abe146101525780633f4ba83a1461014d5780635c975abb14610148578063715018a6146101435780638129fc1c1461013e5780638456cb591461013957806386454f6a146101345780638da5cb5b1461012f57806391d148541461012a578063a217fddf14610125578063cc86b8a914610120578063d547741f1461011b578063e1a8ad5814610116578063f2fde38b14610111578063f87422541461010c5763ffa1ad740361000e57610704565b6106be565b6106a6565b61066b565b610619565b610601565b6105e6565b6105ab565b610575565b61054e565b6104f1565b6104d9565b6104c1565b6104a6565b61048e565b61046a565b610451565b6103db565b610399565b6102d1565b6101b2565b6001600160e01b031981165b0361018357565b600080fd5b9050359061019582610170565b565b90602082820312610183576101ab91610188565b90565b9052565b34610183576101df6101cd6101c8366004610197565b610733565b60405191829182901515815260200190565b0390f35b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761021b57604052565b6101e3565b9061019561022d60405190565b92836101f9565b67ffffffffffffffff811161021b57602090601f01601f19160190565b0190565b90826000939282370152565b9092919261027661027182610234565b610220565b938185526020850190828401116101835761019592610255565b9080601f83011215610183578160206101ab93359101610261565b9060208282031261018357813567ffffffffffffffff8111610183576101ab9201610290565b34610183576102e96102e43660046102ab565b61149d565b604051005b60005b8381106103015750506000910152565b81810151838201526020016102f1565b61025161032992602092610323815190565b94859290565b938491016102ee565b6103426102519160209493610311565b918252565b61035c61035360405190565b92839283610332565b03902090565b6101ab91610347565b6101ab916008021c5b60ff1690565b906101ab915461036b565b60006103946101ab9282610362565b61037a565b34610183576101df6101cd6103af3660046102ab565b610385565b8061017c565b90503590610195826103b4565b90602082820312610183576101ab916103ba565b34610183576101df6103f66103f13660046103c7565b610809565b6040519182918290815260200190565b6001600160a01b031690565b6001600160a01b03811661017c565b9050359061019582610412565b9190604083820312610183576101ab9061044881856103ba565b93602001610421565b34610183576102e961046436600461042e565b9061085a565b34610183576102e961047d36600461042e565b906108f1565b600091031261018357565b346101835761049e366004610483565b6102e9611312565b34610183576104b6366004610483565b6101df6101cd610c34565b34610183576104d1366004610483565b6102e9610acd565b34610183576104e9366004610483565b6102e9610edf565b3461018357610501366004610483565b6102e961125b565b61052a6105336020936102519361051e815190565b80835293849260200190565b958691016102ee565b601f01601f191690565b60208082526101ab92910190610509565b34610183576101df6105696105643660046102ab565b611601565b6040519182918261053d565b3461018357610585366004610483565b6101df610590610a6c565b6040515b918291826001600160a01b03909116815260200190565b34610183576101df6101cd6105c136600461042e565b906107c0565b6101ab6101ab6101ab9290565b6101ab60006105c7565b6101ab6105d4565b34610183576105f6366004610483565b6101df6103f66105de565b34610183576102e96106143660046102ab565b61140c565b34610183576102e961062c36600461042e565b906108e7565b80516001600160a01b031682526101ab91604081019160200151906020818403910152610509565b60208082526101ab92910190610632565b34610183576101df6106866106813660046102ab565b611799565b6040519182918261065a565b90602082820312610183576101ab91610421565b34610183576102e96106b9366004610692565b610b8d565b34610183576106ce366004610483565b6101df6000805160206118388339815191526103f6565b6103746101ab6101ab9290565b6101ab60006106e5565b6101ab6106f2565b3461018357610714366004610483565b6101df61071f6106fc565b6040519182918260ff909116815260200190565b637965db0b60e01b6001600160e01b0319821614908115610752575090565b6101ab91506001600160e01b0319166301ffc9a760e01b1490565b905b600052602052604060002090565b6101ab90610406906001600160a01b031682565b6101ab9061077d565b6101ab90610791565b9061076f9061079a565b6101ab90610374565b6101ab90546107ad565b6101ab9160006107ed6107f3936107d5600090565b50826000805160206118188339815191525b0161076d565b016107a3565b6107b6565b6101ab9081565b6101ab90546107f8565b60016108316101ab9261081a600090565b5060006000805160206118188339815191526107e7565b016107ff565b906101959161084d61084882610809565b610864565b906108579161094f565b50565b9061019591610837565b61019590339061088c565b6001600160a01b0390911681526040810192916101959160200152565b9061089e61089a82846107c0565b1590565b6108a6575050565b6108c86108b260405190565b63e2517d3f60e01b81529283926004840161086f565b0390fd5b90610195916108dd61084882610809565b90610857916109df565b90610195916108cc565b906108fb33610406565b6001600160a01b0382160361091357610857916109df565b60405163334bd91960e11b8152600490fd5b9060ff905b9181191691161790565b906109446101ab61094b92151590565b8254610925565b9055565b6000805160206118188339815191529161096c61089a82846107c0565b156109d75761099060009361098b83866107ed876001998a960161076d565b610934565b33906109c66109c06109c07f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b9261079a565b926109d060405190565b600090a490565b505050600090565b906000805160206118188339815191526109f982846107c0565b156109d7578261098b83610a16936107ed6000948580930161076d565b3390610a466109c06109c07ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b92610a5060405190565b600090a4600190565b6101ab90610406565b6101ab9054610a59565b6101ab7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300610a62565b610a9d610ad5565b610195610abb565b6104066101ab6101ab9290565b6101ab90610aa5565b610195610ac86000610ab2565b610bbc565b610195610a95565b610add610a6c565b339081906001600160a01b031603610af25750565b6108c890610aff60405190565b63118cdaa760e01b8152918291600483016001600160a01b03909116815260200190565b61019590610b2f610ad5565b610b396000610ab2565b6001600160a01b0381166001600160a01b03831614610b5c575061019590610bbc565b6108c890610b6960405190565b631e4fbdf760e01b8152918291600483016001600160a01b03909116815260200190565b61019590610b23565b906001600160a01b039061092a565b90610bb56101ab61094b9261079a565b8254610b96565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930090610bf181610beb84610a62565b93610ba5565b610c24610c1e7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361079a565b9161079a565b91610c2e60405190565b600090a3565b6101ab7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033006107b6565b6101ab9060401c610374565b6101ab9054610c5d565b6101ab905b67ffffffffffffffff1690565b6101ab9054610c73565b610c786101ab6101ab9290565b9067ffffffffffffffff9061092a565b610c786101ab6101ab9267ffffffffffffffff1690565b90610cd36101ab61094b92610cac565b8254610c9c565b9068ff00000000000000009060401b61092a565b90610cfe6101ab61094b92151590565b8254610cda565b6101ae90610c8f565b6020810192916101959190610d05565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0080610d55610d4f61089a83610c69565b92610c85565b91600090610d6282610c8f565b67ffffffffffffffff85161480610e6b575b600194610d91610d8387610c8f565b9167ffffffffffffffff1690565b149081610e43575b155b9081610e3a575b50610e285780610dbe83610db587610c8f565b95019485610cc3565b610e19575b610dcb610e72565b610dd457505050565b610ddd91610cee565b610e147fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291610e0b60405190565b91829182610d0e565b0390a1565b610e238484610cee565b610dc3565b60405163f92ee8a960e01b8152600490fd5b15905038610da2565b9050610d9b610e513061079a565b3b610e62610e5e866105c7565b9190565b14919050610d99565b5080610d74565b610e7a610f6e565b610ed633610e8781610efc565b610e8f610f89565b610ea081610e9b6105d4565b61094f565b50610eba600080516020611838833981519152918261094f565b507331ab8edc475a73daa2a1e2b2933f9dd19fa8e6f99061094f565b506101956111f6565b610195610d1e565b61019590610ef3610f1a565b61019590610f11565b61019590610ee7565b61019590610b2f610f1a565b61019590610f05565b610f2561089a610f3d565b610f2b57565b604051631afcd79f60e31b8152600490fd5b6101ab7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610c69565b610195610f1a565b610195610f66565b610f7e610f1a565b610195610195611001565b610195610f76565b610f99610f1a565b610195610fcc565b6101ab60016105c7565b906000199061092a565b90610fc56101ab61094b926105c7565b8254610fab565b6101957f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f006000610ffa610fa1565b9101610fb5565b610195610f91565b906102516103426020937f2f73747261746f732e7364732e76312e4d736750726570617900000000000000815260190190565b61035c9061104960405190565b91829182611009565b6101ab9061103c565b906102516103426020937f2f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656781526261746560e81b602082015260230190565b61035c906110a760405190565b9182918261105b565b6101ab9061109a565b906102516103426020937f2f636f736d6f732e7374616b696e672e763162657461312e4d7367556e64656c815264656761746560d81b602082015260250190565b61035c9061110760405190565b918291826110b9565b6101ab906110fa565b906102516103426020937f2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e815269526564656c656761746560b01b6020820152602a0190565b61035c9061116c60405190565b91829182611119565b6101ab9061115f565b906102516103426020937f2f636f736d6f732e646973747269627574696f6e2e763162657461312e4d736781527f576974686472617744656c656761746f72526577617264000000000000000000602082015260370190565b61035c906111e460405190565b9182918261117e565b6101ab906111d7565b610195600161098b600061120d8361098b83611052565b61121a8361098b836110b0565b6112278361098b83611110565b6112348361098b83611175565b6111ed565b611250600080516020611838833981519152610864565b6101956101956112c8565b610195611239565b61126b6112d0565b61019561129960017fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300610934565b33610e147f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589161059460405190565b610195611263565b6112d8610c34565b6112de57565b60405163d93c066560e01b8152600490fd5b611307600080516020611838833981519152610864565b61019561019561137f565b6101956112f0565b611322611387565b61019561135060007fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300610934565b33610e147f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9161059460405190565b61019561131a565b61139261089a610c34565b61139857565b604051638dfc202b60e01b8152600490fd5b610195906113c5600080516020611838833981519152610864565b9060006113d56107f38483610362565b6113e95761098b6101959293600192610362565b6108c8836113f660405190565b630215c9fd60e01b81529182916004830161053d565b610195906113aa565b61019590611430600080516020611838833981519152610864565b611473565b9190600861092a91029161144960ff841b90565b921b90565b919061145f6101ab61094b93151590565b908354611435565b6101959160009161144e565b90600061148661089a6107f38584610362565b6113e957611498610195929382610362565b611467565b61019590611415565b906101ab916114b36112d0565b906114c5916114c0611616565b611507565b90610195610fcc565b6001600160a01b0391821681529116602082015260400190565b6101ab91610311565b61035c906114fe60405190565b918291826114e8565b5061151181611799565b600091602082019261152a61089a6107f3865184610362565b6115dd5733920161154561040682516001600160a01b031690565b6001600160a01b038416036115ae575061155e9061168d565b915161159361158d7ff4c759e637311dd9eed44ae2d6e064412639d12a0cbd4131929843f2e8c025489361079a565b916114f1565b9161159d60405190565b806115a8868261053d565b0390a390565b516001600160a01b03169050906108c86115c760405190565b63076ef58760e41b8152928392600484016114ce565b6108c884516115eb60405190565b630198f19b60e71b81529182916004830161053d565b6101ab9060606114a6565b6101ab60026105c7565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00611640816107ff565b61164861160c565b9081146116585761019591610fb5565b604051633ee5aeb560e01b8152600490fd5b6001600160a01b0390911681526101ab9160408201916020818403910152610509565b60008091611699606090565b506116b96116c533926116ab60405190565b92839160208301958661166a565b848103825203826101f9565b51908260dd5af115610183576040519060203d8084528060008386013e018201604052565b6101ab6040610220565b6116fc6116ea565b906000825260606020830152565b6101ab6116f4565b9050519061019582610412565b9092919261172f61027182610234565b9381855260208501908284011161018357610195926102ee565b9080601f830112156101835781516101ab9260200161171f565b9190916040818403126101835761177a8382611712565b92602082015167ffffffffffffffff8111610183576101ab9201611749565b6101ab6117d56117c86117b36117ad61170a565b946117e2565b60206117bd825190565b818301019101611763565b602085015283919061079a565b6001600160a01b03169052565b600080916117ee606090565b5060208151019060dc5afa15610183576040519060203d8084528060008386013e01820160405256fe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a2646970667358221220482b020dae5cb7daa6e0973b7c6b045e88dc79902bec0f9950e0f61cdc65d41864736f6c63430008140033",
			Init:    "0x8129fc1c",
		},
	}

	for _, contract := range contracts {
		implAddr := crypto.CreateAddress(pc.consensusOwner, pc.stateDB.GetNonce(pc.consensusOwner))
		proxyAddr := contract.Address

		bin, err := hexutil.Decode(contract.Bin)
		if err != nil {
			return err
		}

		data, err := hexutil.Decode(contract.Init)
		if err != nil {
			return err
		}

		implCode := pc.stateDB.GetCode(implAddr)
		if implCode == nil {
			if _, err := pc.create(pc.proxyOwner, implAddr, bin, nil); err != nil {
				return errorsmod.Wrapf(err, "failed to get or create address on '%s'", implAddr)
			}
		}

		value := sdkmath.NewInt(0)
		c := types.NewUpdateImplmentationProposal(
			proxyAddr.Hex(),
			implAddr.Hex(),
			data,
			&value,
		)

		if err := c.ValidateBasic(); err != nil {
			return err
		}

		if err = pc.updateProxyImplementation(c.(*types.UpdateImplmentationProposal), false); err != nil {
			return err
		}
	}
	if err := pc.finalize(); err != nil {
		return err
	}
	return nil
}

func (pc *ProposalCounsil) UpdateProxyImplementation(p *types.UpdateImplmentationProposal) error {
	return pc.updateProxyImplementation(p, true)
}

// updateProxyImplementation execute provided function to a proxy contract for impl upgrade
func (pc *ProposalCounsil) updateProxyImplementation(p *types.UpdateImplmentationProposal, commit bool) error {
	if !pc.verifier.IsTrustedAddress(p.ProxyAddress) {
		return fmt.Errorf("proxy '%s' has not been verified", p.ProxyAddress)
	}

	proxyAddress := common.HexToAddress(p.ProxyAddress)
	implAddress := common.HexToAddress(p.ImplementationAddress)

	implCode := pc.stateDB.GetCode(implAddress)
	if implCode == nil {
		return fmt.Errorf("implementation '%s' not found", implAddress)
	}

	if bytes.Equal(implCode, emptyCodeHash[:]) {
		return fmt.Errorf("implementation '%s' is EOA", implAddress)
	}

	proxyCode := pc.stateDB.GetCode(proxyAddress)
	if proxyCode != nil {
		upgradeData, err := types.EncodeContractFunc(
			types.TransparentUpgradableProxyABI,
			"upgradeToAndCall",
			implAddress,
			p.Data,
		)
		if err != nil {
			return err
		}

		if err := pc.call(pc.consensusOwner, proxyAddress, upgradeData, p.Amount.BigInt()); err != nil {
			return err
		}
	} else {
		proxyConstructorData, err := types.EncodeContractFunc(
			types.TransparentUpgradableProxyABI,
			"",
			implAddress,
			pc.consensusOwner,
			p.Data,
		)
		if err != nil {
			return err
		}

		proxyConstructorData = append(common.FromHex(types.TransparentUpgradableProxyBin), proxyConstructorData...)

		if _, err := pc.create(pc.proxyOwner, proxyAddress, proxyConstructorData, p.Amount.BigInt()); err != nil {
			return err
		}
	}

	if commit {
		if err := pc.finalize(); err != nil {
			return err
		}
	}

	return nil
}
