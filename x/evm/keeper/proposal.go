package keeper

import (
	"bytes"
	"fmt"
	"math"
	"math/big"

	errorsmod "cosmossdk.io/errors"
	sdkmath "cosmossdk.io/math"
	sdk "github.com/cosmos/cosmos-sdk/types"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/params"

	stratos "github.com/stratosnet/stratos-chain/types"
	"github.com/stratosnet/stratos-chain/x/evm/statedb"
	"github.com/stratosnet/stratos-chain/x/evm/tracers"
	"github.com/stratosnet/stratos-chain/x/evm/types"
	"github.com/stratosnet/stratos-chain/x/evm/vm"
)

var (
	emptyCodeHash = crypto.Keccak256Hash(nil)
)

type MigratableContract struct {
	Address common.Address
	Bin     string
	Init    string
}

type ProposalCounsil struct {
	keeper         *Keeper
	ctx            sdk.Context
	stateDB        *statedb.StateDB
	evm            *vm.EVM
	consensusOwner common.Address
	proxyOwner     common.Address
	verifier       *vm.GenesisContractVerifier
}

func NewProposalCounsil(k *Keeper, ctx sdk.Context) (*ProposalCounsil, error) {
	pc := &ProposalCounsil{
		keeper:         k,
		ctx:            ctx,
		consensusOwner: vm.ConsensusAddress,
		proxyOwner:     vm.ProxyOwnerAddress,
		verifier:       k.verifier,
	}
	cfg, err := k.EVMConfig(ctx)
	if err != nil {
		return nil, errorsmod.Wrap(err, "failed to load evm config")
	}

	blockCtx := vm.BlockContext{
		CanTransfer:        vm.CanTransfer,
		Transfer:           vm.Transfer,
		GetHash:            k.GetHashFn(ctx),
		ParseProtoFromData: k.ParseProtoFromDataFn(ctx),
		Coinbase:           cfg.CoinBase,
		GasLimit:           stratos.BlockGasLimit(ctx),
		BlockNumber:        big.NewInt(ctx.BlockHeight()),
		Time:               big.NewInt(ctx.BlockHeader().Time.Unix()),
		Difficulty:         big.NewInt(0), // unused. Only required in PoW context
		BaseFee:            cfg.BaseFee,
	}

	txCtx := vm.TxContext{
		Origin:   pc.consensusOwner,
		GasPrice: big.NewInt(0),
	}
	tracer := tracers.NewNoOpTracer()
	vmConfig := k.VMConfig(ctx, cfg, tracer)

	txConfig := statedb.NewEmptyTxConfig(common.BytesToHash(ctx.HeaderHash()))
	pc.stateDB = statedb.New(ctx, pc.keeper, txConfig)
	pc.evm = vm.NewEVM(blockCtx, txCtx, pc.stateDB, cfg.ChainConfig, vmConfig, pc.verifier)

	return pc, nil
}

func (pc *ProposalCounsil) finalize() error {
	if err := pc.stateDB.Commit(); err != nil {
		return err
	}
	return nil
}

func (pc *ProposalCounsil) call(sender, contractAddress common.Address, data []byte, value *big.Int) error {
	// required
	txCtx := vm.TxContext{
		Origin:   sender,
		GasPrice: big.NewInt(0),
	}
	pc.evm.Reset(txCtx, pc.stateDB)

	nonce := pc.stateDB.GetNonce(sender)
	// we do not care about gas during consil execution
	gas := uint64(math.MaxUint64)
	// for safety
	if value == nil {
		value = big.NewInt(0)
	}

	{
		pc.stateDB.SetNonce(sender, nonce+1)
	}

	if _, _, vmErr := pc.evm.Call(vm.AccountRef(sender), contractAddress, data, gas, value); vmErr != nil {
		return vmErr
	}
	return nil
}

func (pc *ProposalCounsil) create(sender, contractAddress common.Address, data []byte, value *big.Int) (*common.Address, error) {
	// required
	txCtx := vm.TxContext{
		Origin:   sender,
		GasPrice: big.NewInt(0),
	}
	pc.evm.Reset(txCtx, pc.stateDB)

	nonce := pc.stateDB.GetNonce(sender)
	// we do not care about gas during consil execution
	gas := uint64(math.MaxUint64)

	// for safety
	if value == nil {
		value = big.NewInt(0)
	}

	interpreter := vm.NewEVMInterpreter(pc.evm, pc.evm.Config)

	accRef := vm.AccountRef(sender)

	{
		pc.stateDB.SetNonce(accRef.Address(), nonce+1)
	}

	contractHash := pc.evm.StateDB.GetCodeHash(contractAddress)
	if pc.evm.StateDB.GetNonce(contractAddress) != 0 || (contractHash != (common.Hash{}) && contractHash != emptyCodeHash) {
		return nil, vm.ErrContractAddressCollision
	}

	snapshot := pc.evm.StateDB.Snapshot()

	pc.evm.StateDB.CreateAccount(contractAddress)
	pc.evm.StateDB.SetNonce(contractAddress, 1)
	pc.evm.Context.Transfer(pc.evm.StateDB, sender, contractAddress, value)

	contract := vm.NewContract(accRef, vm.AccountRef(contractAddress), value, gas)
	contract.SetCallCode(&contractAddress, common.Hash{}, data)

	ret, err := interpreter.Run(contract, nil, false)
	if err != nil {
		return nil, err
	}

	// Check whether the max code size has been exceeded, assign err if the case.
	if err == nil && len(ret) > params.MaxCodeSize {
		err = vm.ErrMaxCodeSizeExceeded
	}

	// Reject code starting with 0xEF if EIP-3541 is enabled.
	if err == nil && len(ret) >= 1 && ret[0] == 0xEF {
		err = vm.ErrInvalidCode
	}

	// if the contract creation ran successfully and no errors were returned
	// calculate the gas required to store the code. If the code could not
	// be stored due to not enough gas set an error and let it be handled
	// by the error checking condition below.
	if err == nil {
		createDataGas := uint64(len(ret)) * params.CreateDataGas
		if contract.UseGas(createDataGas) {
			pc.evm.StateDB.SetCode(contractAddress, ret)
		} else {
			err = vm.ErrCodeStoreOutOfGas
		}
	}

	// When an error was returned by the EVM or when setting the creation code
	// above we revert to the snapshot and consume any gas remaining. Additionally
	// when we're in homestead this also counts for code storage gas errors.
	if err != nil {
		pc.evm.StateDB.RevertToSnapshot(snapshot)
		if err != vm.ErrExecutionReverted {
			contract.UseGas(contract.Gas)
		}
	}

	return &contractAddress, nil
}

// Migrate1to2 for initialize contract on v0.12
func (pc *ProposalCounsil) Migrate1to2() error {
	contracts := []*MigratableContract{
		{
			Address: vm.SystemContractAddress,
			Bin:     "0x60806040523461001a57604051611b186100208239611b1890f35b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806301ffc9a71461019b578063082ffa8c146101965780631ea0ab57146101915780631f5a0bbe1461018c5780632478842914610187578063248a9ca3146101825780632f2ff15d1461017d57806336568abe1461017857806337cb6736146101735780633f4ba83a1461016e5780635c975abb14610169578063715018a6146101645780638129fc1c1461015f5780638456cb591461015a57806386454f6a146101555780638da5cb5b1461015057806391d148541461014b578063a217fddf14610146578063cc86b8a914610141578063d547741f1461013c578063e1a8ad5814610137578063f2fde38b14610132578063f87422541461012d5763ffa1ad740361000e576107cf565b610789565b610771565b61074a565b6106f8565b6106e0565b6106c5565b61068a565b610654565b61062d565b6105d0565b6105b8565b6105a0565b610585565b61056d565b610547565b6104de565b6104c5565b610477565b610438565b610420565b6103c9565b610301565b6101e2565b6001600160e01b031981165b036101b357565b600080fd5b905035906101c5826101a0565b565b906020828203126101b3576101db916101b8565b90565b9052565b346101b35761020f6101fd6101f83660046101c7565b6107fe565b60405191829182901515815260200190565b0390f35b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761024b57604052565b610213565b906101c561025d60405190565b9283610229565b67ffffffffffffffff811161024b57602090601f01601f19160190565b0190565b90826000939282370152565b909291926102a66102a182610264565b610250565b938185526020850190828401116101b3576101c592610285565b9080601f830112156101b3578160206101db93359101610291565b906020828203126101b357813567ffffffffffffffff81116101b3576101db92016102c0565b346101b3576103196103143660046102db565b6116bf565b604051005b60005b8381106103315750506000910152565b8181015183820152602001610321565b61028161035992602092610353815190565b94859290565b9384910161031e565b6103726102819160209493610341565b918252565b61038c61038360405190565b92839283610362565b03902090565b6101db91610377565b6101db916008021c5b60ff1690565b906101db915461039b565b60006103c46101db9282610392565b6103aa565b346101b35761020f6101fd6103df3660046102db565b6103b5565b6001600160a01b031690565b6001600160a01b0381166101ac565b905035906101c5826103f0565b906020828203126101b3576101db916103ff565b346101b35761031961043336600461040c565b6113e4565b346101b35761031961044b36600461040c565b611481565b806101ac565b905035906101c582610450565b906020828203126101b3576101db91610456565b346101b35761020f61049261048d366004610463565b61089a565b6040519182918290815260200190565b91906040838203126101b3576101db906104bc8185610456565b936020016103ff565b346101b3576103196104d83660046104a2565b906108eb565b346101b3576103196104f13660046104a2565b90610982565b6101db906103e4906001600160a01b031682565b6101db906104f7565b6101db9061050b565b9061052790610514565b600052602052604060002090565b6101db906103c460019160009261051d565b346101b35761020f6101fd61055d36600461040c565b610535565b60009103126101b357565b346101b35761057d366004610562565b610319611563565b346101b357610595366004610562565b61020f6101fd610ccc565b346101b3576105b0366004610562565b610319610b5e565b346101b3576105c8366004610562565b610319610f77565b346101b3576105e0366004610562565b6103196114ac565b610609610612602093610281936105fd815190565b80835293849260200190565b9586910161031e565b601f01601f191690565b60208082526101db929101906105e8565b346101b35761020f6106486106433660046102db565b611894565b6040519182918261061c565b346101b357610664366004610562565b61020f61066f610afd565b6040515b918291826001600160a01b03909116815260200190565b346101b35761020f6101fd6106a03660046104a2565b90610851565b6101db6101db6101db9290565b6101db60006106a6565b6101db6106b3565b346101b3576106d5366004610562565b61020f6104926106bd565b346101b3576103196106f33660046102db565b611667565b346101b35761031961070b3660046104a2565b90610978565b80516001600160a01b031682526101db916040810191602001519060208184039101526105e8565b60208082526101db92910190610711565b346101b35761020f6107656107603660046102db565b611a24565b60405191829182610739565b346101b35761031961078436600461040c565b610c25565b346101b357610799366004610562565b61020f600080516020611ac3833981519152610492565b6103a46101db6101db9290565b6101db60006107b0565b6101db6107bd565b346101b3576107df366004610562565b61020f6107ea6107c7565b6040519182918260ff909116815260200190565b637965db0b60e01b6001600160e01b031982161490811561081d575090565b6101db91506001600160e01b0319166301ffc9a760e01b1490565b90610527565b6101db906103a4565b6101db905461083e565b6101db91600061087e61088493610866600090565b5082600080516020611aa38339815191525b01610838565b0161051d565b610847565b6101db9081565b6101db9054610889565b60016108c26101db926108ab600090565b506000600080516020611aa3833981519152610878565b01610890565b906101c5916108de6108d98261089a565b6108f5565b906108e8916109e0565b50565b906101c5916108c8565b6101c590339061091d565b6001600160a01b0390911681526040810192916101c59160200152565b9061092f61092b8284610851565b1590565b610937575050565b61095961094360405190565b63e2517d3f60e01b815292839260048401610900565b0390fd5b906101c59161096e6108d98261089a565b906108e891610a70565b906101c59161095d565b9061098c336103e4565b6001600160a01b038216036109a4576108e891610a70565b60405163334bd91960e11b8152600490fd5b9060ff905b9181191691161790565b906109d56101db6109dc92151590565b82546109b6565b9055565b600080516020611aa3833981519152916109fd61092b8284610851565b15610a6857610a21600093610a1c838661087e876001998a9601610838565b6109c5565b3390610a57610a51610a517f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b92610514565b92610a6160405190565b600090a490565b505050600090565b90600080516020611aa3833981519152610a8a8284610851565b15610a685782610a1c83610aa79361087e60009485809301610838565b3390610ad7610a51610a517ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b92610ae160405190565b600090a4600190565b6101db906103e4565b6101db9054610aea565b6101db7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300610af3565b610b2e610b66565b6101c5610b4c565b6103e46101db6101db9290565b6101db90610b36565b6101c5610b596000610b43565b610c54565b6101c5610b26565b610b6e610afd565b3390610b82825b916001600160a01b031690565b03610b8a5750565b61095990610b9760405190565b63118cdaa760e01b8152918291600483016001600160a01b03909116815260200190565b6101c590610bc7610b66565b610bd16000610b43565b6001600160a01b0381166001600160a01b03831614610bf457506101c590610c54565b61095990610c0160405190565b631e4fbdf760e01b8152918291600483016001600160a01b03909116815260200190565b6101c590610bbb565b906001600160a01b03906109bb565b90610c4d6101db6109dc92610514565b8254610c2e565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930090610c8981610c8384610af3565b93610c3d565b610cbc610cb67f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610514565b91610514565b91610cc660405190565b600090a3565b6101db7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300610847565b6101db9060401c6103a4565b6101db9054610cf5565b6101db905b67ffffffffffffffff1690565b6101db9054610d0b565b610d106101db6101db9290565b9067ffffffffffffffff906109bb565b610d106101db6101db9267ffffffffffffffff1690565b90610d6b6101db6109dc92610d44565b8254610d34565b9068ff00000000000000009060401b6109bb565b90610d966101db6109dc92151590565b8254610d72565b6101de90610d27565b6020810192916101c59190610d9d565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0080610ded610de761092b83610d01565b92610d1d565b91600090610dfa82610d27565b67ffffffffffffffff85161480610f03575b600194610e29610e1b87610d27565b9167ffffffffffffffff1690565b149081610edb575b155b9081610ed2575b50610ec05780610e5683610e4d87610d27565b95019485610d5b565b610eb1575b610e63610f0a565b610e6c57505050565b610e7591610d86565b610eac7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291610ea360405190565b91829182610da6565b0390a1565b610ebb8484610d86565b610e5b565b60405163f92ee8a960e01b8152600490fd5b15905038610e3a565b9050610e33610ee930610514565b3b610efa610ef6866106a6565b9190565b14919050610e31565b5080610e0c565b610f12611006565b610f6e33610f1f81610f94565b610f27611021565b610f3881610f336106b3565b6109e0565b50610f52600080516020611ac383398151915291826109e0565b507331ab8edc475a73daa2a1e2b2933f9dd19fa8e6f9906109e0565b506101c561128e565b6101c5610db6565b6101c590610f8b610fb2565b6101c590610fa9565b6101c590610f7f565b6101c590610bc7610fb2565b6101c590610f9d565b610fbd61092b610fd5565b610fc357565b604051631afcd79f60e31b8152600490fd5b6101db7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610d01565b6101c5610fb2565b6101c5610ffe565b611016610fb2565b6101c56101c5611099565b6101c561100e565b611031610fb2565b6101c5611064565b6101db60016106a6565b90600019906109bb565b9061105d6101db6109dc926106a6565b8254611043565b6101c57f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f006000611092611039565b910161104d565b6101c5611029565b906102816103726020937f2f73747261746f732e7364732e76312e4d736750726570617900000000000000815260190190565b61038c906110e160405190565b918291826110a1565b6101db906110d4565b906102816103726020937f2f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656781526261746560e81b602082015260230190565b61038c9061113f60405190565b918291826110f3565b6101db90611132565b906102816103726020937f2f636f736d6f732e7374616b696e672e763162657461312e4d7367556e64656c815264656761746560d81b602082015260250190565b61038c9061119f60405190565b91829182611151565b6101db90611192565b906102816103726020937f2f636f736d6f732e7374616b696e672e763162657461312e4d7367426567696e815269526564656c656761746560b01b6020820152602a0190565b61038c9061120460405190565b918291826111b1565b6101db906111f7565b906102816103726020937f2f636f736d6f732e646973747269627574696f6e2e763162657461312e4d736781527f576974686472617744656c656761746f72526577617264000000000000000000602082015260370190565b61038c9061127c60405190565b91829182611216565b6101db9061126f565b6101c56001610a1c60006112a583610a1c836110ea565b6112b283610a1c83611148565b6112bf83610a1c836111a8565b6112cc83610a1c8361120d565b611285565b6101c5906112ec600080516020611ac38339815191526108f5565b611375565b6101de906001600160a01b031660601b90565b610281816014936112f1565b634e487b7160e01b600052602160045260246000fd5b6004111561133057565b611310565b906101c582611326565b6101db90611335565b6101de9061133f565b916101db9261136860408201936000830190611348565b60208184039101526105e8565b906001611385610884848361051d565b61139757610a1c6101c592938261051d565b8260006113c26113a660405190565b80936113b6602083019182611304565b90810382520383610229565b6109596113ce60405190565b633d62750d60e21b815292839260048401611351565b6101c5906112d1565b6101c590611408600080516020611ac38339815191526108f5565b61144b565b919060086109bb91029161142160ff841b90565b921b90565b91906114376101db6109dc93151590565b90835461140d565b6101c591600091611426565b600161145d61092b610884848461051d565b611475576114706101c59260009261051d565b61143f565b6113c26113a660405190565b6101c5906113ed565b6114a1600080516020611ac38339815191526108f5565b6101c56101c5611519565b6101c561148a565b6114bc611521565b6101c56114ea60017fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033006109c5565b33610eac7f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589161067360405190565b6101c56114b4565b611529610ccc565b61152f57565b60405163d93c066560e01b8152600490fd5b611558600080516020611ac38339815191526108f5565b6101c56101c56115d0565b6101c5611541565b6115736115d8565b6101c56115a160007fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033006109c5565b33610eac7f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9161067360405190565b6101c561156b565b6115e361092b610ccc565b6115e957565b604051638dfc202b60e01b8152600490fd5b6101c590611616600080516020611ac38339815191526108f5565b611624565b6101db91610341565b9060006116346108848483610392565b61164857610a1c6101c59293600192610392565b8260026113c261165760405190565b80936113b660208301918261161b565b6101c5906115fb565b6101c59061168b600080516020611ac38339815191526108f5565b90600061169e61092b6108848584610392565b6116b0576114706101c5929382610392565b8260036113c261165760405190565b6101c590611670565b906101db916116d5611521565b906116e7916116e26118a9565b6116f0565b906101c5611064565b3392919061170261088485600161051d565b801561174b575b155b61171a576101db92935061179a565b6109598461172760405190565b63b0e06e6960e01b8152918291600483016001600160a01b03909116815260200190565b5061170b326117626001600160a01b038716610b75565b149050611709565b6001600160a01b0391821681529116602082015260400190565b61038c9061179160405190565b9182918261161b565b506117a481611a24565b60009160208201926117bd61092b610884865184610392565b611870573392016117d86103e482516001600160a01b031690565b6001600160a01b0384160361184157506117f190611918565b91516118266118207ff4c759e637311dd9eed44ae2d6e064412639d12a0cbd4131929843f2e8c0254893610514565b91611784565b9161183060405190565b8061183b868261061c565b0390a390565b516001600160a01b031690509061095961185a60405190565b63076ef58760e41b81529283926004840161176a565b610959845161187e60405190565b630198f19b60e71b81529182916004830161061c565b6101db9060606116c8565b6101db60026106a6565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f006118d381610890565b6118db61189f565b9081146118eb576101c59161104d565b604051633ee5aeb560e01b8152600490fd5b6001600160a01b0390911681526101db916040820191611368565b60008091611924606090565b50611944611950339261193660405190565b9283916020830195866118fd565b84810382520382610229565b51908260dd5af1156101b3576040519060203d8084528060008386013e018201604052565b6101db6040610250565b611987611975565b906000825260606020830152565b6101db61197f565b905051906101c5826103f0565b909291926119ba6102a182610264565b938185526020850190828401116101b3576101c59261031e565b9080601f830112156101b35781516101db926020016119aa565b9190916040818403126101b357611a05838261199d565b92602082015167ffffffffffffffff81116101b3576101db92016119d4565b6101db611a60611a53611a3e611a38611995565b94611a6d565b6020611a48825190565b8183010191016119ee565b6020850152839190610514565b6001600160a01b03169052565b60008091611a79606090565b5060208151019060dc5afa156101b3576040519060203d8084528060008386013e01820160405256fe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a2646970667358221220f27ff742896c73abf36f5099e70d51519ca5796ecf599a380924cdde42ce0de564736f6c63430008140033",
			Init:    "0x8129fc1c",
		},
	}

	for _, contract := range contracts {
		implAddr := crypto.CreateAddress(pc.consensusOwner, pc.stateDB.GetNonce(pc.consensusOwner))
		proxyAddr := contract.Address

		bin, err := hexutil.Decode(contract.Bin)
		if err != nil {
			return err
		}

		data, err := hexutil.Decode(contract.Init)
		if err != nil {
			return err
		}

		implCode := pc.stateDB.GetCode(implAddr)
		if implCode == nil {
			if _, err := pc.create(pc.proxyOwner, implAddr, bin, nil); err != nil {
				return errorsmod.Wrapf(err, "failed to get or create address on '%s'", implAddr)
			}
		}

		value := sdkmath.NewInt(0)
		c := types.NewUpdateImplmentationProposal(
			proxyAddr.Hex(),
			implAddr.Hex(),
			data,
			&value,
		)

		if err := c.ValidateBasic(); err != nil {
			return err
		}

		if err = pc.updateProxyImplementation(c.(*types.UpdateImplmentationProposal), false); err != nil {
			return err
		}
	}
	if err := pc.finalize(); err != nil {
		return err
	}
	return nil
}

func (pc *ProposalCounsil) UpdateProxyImplementation(p *types.UpdateImplmentationProposal) error {
	return pc.updateProxyImplementation(p, true)
}

// updateProxyImplementation execute provided function to a proxy contract for impl upgrade
func (pc *ProposalCounsil) updateProxyImplementation(p *types.UpdateImplmentationProposal, commit bool) error {
	if !pc.verifier.IsTrustedAddress(p.ProxyAddress) {
		return fmt.Errorf("proxy '%s' has not been verified", p.ProxyAddress)
	}

	proxyAddress := common.HexToAddress(p.ProxyAddress)
	implAddress := common.HexToAddress(p.ImplementationAddress)

	implCode := pc.stateDB.GetCode(implAddress)
	if implCode == nil {
		return fmt.Errorf("implementation '%s' not found", implAddress)
	}

	if bytes.Equal(implCode, emptyCodeHash[:]) {
		return fmt.Errorf("implementation '%s' is EOA", implAddress)
	}

	proxyCode := pc.stateDB.GetCode(proxyAddress)
	if proxyCode != nil {
		upgradeData, err := types.EncodeContractFunc(
			types.TransparentUpgradableProxyABI,
			"upgradeToAndCall",
			implAddress,
			p.Data,
		)
		if err != nil {
			return err
		}

		if err := pc.call(pc.consensusOwner, proxyAddress, upgradeData, p.Amount.BigInt()); err != nil {
			return err
		}
	} else {
		proxyConstructorData, err := types.EncodeContractFunc(
			types.TransparentUpgradableProxyABI,
			"",
			implAddress,
			pc.consensusOwner,
			p.Data,
		)
		if err != nil {
			return err
		}

		proxyConstructorData = append(common.FromHex(types.TransparentUpgradableProxyBin), proxyConstructorData...)

		if _, err := pc.create(pc.proxyOwner, proxyAddress, proxyConstructorData, p.Amount.BigInt()); err != nil {
			return err
		}
	}

	if commit {
		if err := pc.finalize(); err != nil {
			return err
		}
	}

	return nil
}
