// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stratos/register/v1/genesis.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the register module's genesis state.
type GenesisState struct {
	Params            Params                                 `protobuf:"bytes,1,opt,name=params,proto3" json:"params" yaml:"params"`
	ResourceNodes     ResourceNodes                          `protobuf:"bytes,2,rep,name=resource_nodes,json=resourceNodes,proto3,castrepeated=ResourceNodes" json:"resource_nodes" yaml:"resource_nodes"`
	MetaNodes         MetaNodes                              `protobuf:"bytes,3,rep,name=meta_nodes,json=metaNodes,proto3,castrepeated=MetaNodes" json:"meta_nodes" yaml:"meta_nodes"`
	RemainingNozLimit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=remaining_noz_limit,json=remainingNozLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"remaining_noz_limit" yaml:"remaining_noz_limit"`
	Slashing          []Slashing                             `protobuf:"bytes,5,rep,name=slashing,proto3" json:"slashing" yaml:"slashing_info"`
	StakeNozRate      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=stake_noz_rate,json=stakeNozRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stake_noz_rate" yaml:"stake_noz_rate"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bdab54ebea9e48e, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetResourceNodes() ResourceNodes {
	if m != nil {
		return m.ResourceNodes
	}
	return nil
}

func (m *GenesisState) GetMetaNodes() MetaNodes {
	if m != nil {
		return m.MetaNodes
	}
	return nil
}

func (m *GenesisState) GetSlashing() []Slashing {
	if m != nil {
		return m.Slashing
	}
	return nil
}

type GenesisMetaNode struct {
	NetworkAddress string            `protobuf:"bytes,1,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	Pubkey         *types.Any        `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey" yaml:"pubkey"`
	Suspend        bool              `protobuf:"varint,3,opt,name=suspend,proto3" json:"suspend" yaml:"suspend"`
	Status         types1.BondStatus `protobuf:"varint,4,opt,name=status,proto3,enum=cosmos.staking.v1beta1.BondStatus" json:"status" yaml:"status"`
	Tokens         string            `protobuf:"bytes,5,opt,name=tokens,proto3" json:"tokens" yaml:"tokens"`
	OwnerAddress   string            `protobuf:"bytes,6,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
	Description    Description       `protobuf:"bytes,7,opt,name=description,proto3" json:"description" yaml:"description"`
}

func (m *GenesisMetaNode) Reset()         { *m = GenesisMetaNode{} }
func (m *GenesisMetaNode) String() string { return proto.CompactTextString(m) }
func (*GenesisMetaNode) ProtoMessage()    {}
func (*GenesisMetaNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bdab54ebea9e48e, []int{1}
}
func (m *GenesisMetaNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisMetaNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisMetaNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisMetaNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisMetaNode.Merge(m, src)
}
func (m *GenesisMetaNode) XXX_Size() int {
	return m.Size()
}
func (m *GenesisMetaNode) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisMetaNode.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisMetaNode proto.InternalMessageInfo

func (m *GenesisMetaNode) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *GenesisMetaNode) GetPubkey() *types.Any {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *GenesisMetaNode) GetSuspend() bool {
	if m != nil {
		return m.Suspend
	}
	return false
}

func (m *GenesisMetaNode) GetStatus() types1.BondStatus {
	if m != nil {
		return m.Status
	}
	return types1.Unspecified
}

func (m *GenesisMetaNode) GetTokens() string {
	if m != nil {
		return m.Tokens
	}
	return ""
}

func (m *GenesisMetaNode) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *GenesisMetaNode) GetDescription() Description {
	if m != nil {
		return m.Description
	}
	return Description{}
}

type Slashing struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address" yaml:"wallet_address"`
	Value         int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value" yaml:"value"`
}

func (m *Slashing) Reset()         { *m = Slashing{} }
func (m *Slashing) String() string { return proto.CompactTextString(m) }
func (*Slashing) ProtoMessage()    {}
func (*Slashing) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bdab54ebea9e48e, []int{2}
}
func (m *Slashing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Slashing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Slashing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Slashing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Slashing.Merge(m, src)
}
func (m *Slashing) XXX_Size() int {
	return m.Size()
}
func (m *Slashing) XXX_DiscardUnknown() {
	xxx_messageInfo_Slashing.DiscardUnknown(m)
}

var xxx_messageInfo_Slashing proto.InternalMessageInfo

func (m *Slashing) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *Slashing) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "stratos.register.v1.GenesisState")
	proto.RegisterType((*GenesisMetaNode)(nil), "stratos.register.v1.GenesisMetaNode")
	proto.RegisterType((*Slashing)(nil), "stratos.register.v1.Slashing")
}

func init() { proto.RegisterFile("stratos/register/v1/genesis.proto", fileDescriptor_5bdab54ebea9e48e) }

var fileDescriptor_5bdab54ebea9e48e = []byte{
	// 849 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x36, 0x8d, 0x9b, 0x4c, 0x62, 0x57, 0xdd, 0x06, 0xb4, 0x49, 0x55, 0x8f, 0x3b, 0x42,
	0xc8, 0x15, 0xca, 0xae, 0x92, 0x54, 0x42, 0xe2, 0x44, 0x57, 0x95, 0x10, 0x02, 0xac, 0x6a, 0x82,
	0x40, 0x70, 0xb1, 0xc6, 0xeb, 0xe9, 0x66, 0x65, 0xef, 0x8c, 0x35, 0x33, 0x4e, 0x70, 0x2e, 0xdc,
	0xb9, 0x80, 0xc4, 0xb7, 0xe0, 0xcc, 0x87, 0xa8, 0x38, 0x55, 0x9c, 0x10, 0x87, 0x01, 0x92, 0x9b,
	0x8f, 0xfb, 0x09, 0xd0, 0xce, 0xcc, 0xda, 0xeb, 0x60, 0x21, 0xf5, 0xe4, 0x79, 0xbf, 0xf7, 0x7b,
	0x7f, 0xe6, 0xed, 0xef, 0x8d, 0xc1, 0x13, 0xa9, 0x04, 0x51, 0x5c, 0x46, 0x82, 0xa6, 0x99, 0x54,
	0x54, 0x44, 0x17, 0xc7, 0x51, 0x4a, 0x19, 0x95, 0x99, 0x0c, 0x27, 0x82, 0x2b, 0xee, 0x3f, 0x74,
	0x94, 0xb0, 0xa2, 0x84, 0x17, 0xc7, 0x87, 0x07, 0x29, 0xe7, 0xe9, 0x98, 0x46, 0x86, 0x32, 0x98,
	0xbe, 0x8a, 0x08, 0x9b, 0x59, 0xfe, 0xe1, 0x7e, 0xca, 0x53, 0x6e, 0x8e, 0x51, 0x79, 0x72, 0xe8,
	0x41, 0xc2, 0x65, 0xce, 0x65, 0xdf, 0x3a, 0xac, 0xe1, 0x5c, 0xef, 0x59, 0x2b, 0x92, 0x8a, 0x8c,
	0x32, 0x96, 0x46, 0x17, 0xc7, 0x03, 0xaa, 0xc8, 0x71, 0x65, 0x3b, 0x16, 0x5a, 0xd7, 0xe9, 0xa2,
	0x25, 0xc3, 0x41, 0xff, 0x6c, 0x81, 0xbd, 0x4f, 0x6c, 0xf3, 0x67, 0x8a, 0x28, 0xea, 0x7f, 0x09,
	0x1a, 0x13, 0x22, 0x48, 0x2e, 0x03, 0xaf, 0xe3, 0x75, 0x77, 0x4f, 0x1e, 0x85, 0x6b, 0x2e, 0x13,
	0xbe, 0x34, 0x94, 0x18, 0xbe, 0xd6, 0x70, 0x63, 0xae, 0xa1, 0x0b, 0x29, 0x34, 0x6c, 0xce, 0x48,
	0x3e, 0xfe, 0x08, 0x59, 0x1b, 0x61, 0xe7, 0xf0, 0x7f, 0xf0, 0x40, 0x4b, 0x50, 0xc9, 0xa7, 0x22,
	0xa1, 0x7d, 0xc6, 0x87, 0x54, 0x06, 0x77, 0x3a, 0x9b, 0xdd, 0xdd, 0x93, 0x27, 0x6b, 0xd3, 0x63,
	0x47, 0xed, 0xf1, 0x21, 0x8d, 0x3f, 0x76, 0x45, 0x6e, 0x25, 0x28, 0x34, 0x7c, 0xc7, 0x16, 0x5b,
	0xc5, 0xd1, 0x2f, 0x7f, 0xc1, 0x66, 0x3d, 0x81, 0xc4, 0x4d, 0x51, 0x37, 0x7d, 0x01, 0x40, 0x4e,
	0x15, 0x71, 0x7d, 0x6c, 0x9a, 0x3e, 0x1e, 0xaf, 0xed, 0xe3, 0x0b, 0xaa, 0x88, 0xe9, 0xe1, 0x99,
	0xeb, 0xa1, 0x16, 0x58, 0x68, 0xf8, 0xc0, 0xd6, 0x5f, 0x62, 0x65, 0xed, 0x9d, 0x2a, 0x48, 0xe2,
	0x9d, 0xbc, 0x3a, 0xfa, 0x3f, 0x7b, 0xe0, 0xa1, 0xa0, 0x39, 0xc9, 0x58, 0xc6, 0xd2, 0x3e, 0xe3,
	0x57, 0xfd, 0x71, 0x96, 0x67, 0x2a, 0xb8, 0xdb, 0xf1, 0xba, 0x3b, 0x71, 0x52, 0xa6, 0xff, 0x53,
	0xc3, 0xf7, 0xd3, 0x4c, 0x9d, 0x4f, 0x07, 0x61, 0xc2, 0x73, 0xf7, 0xc1, 0xdd, 0xcf, 0x91, 0x1c,
	0x8e, 0x22, 0x35, 0x9b, 0x50, 0x19, 0x7e, 0xca, 0xd4, 0x5c, 0xc3, 0x75, 0xc9, 0x0a, 0x0d, 0x0f,
	0xab, 0x89, 0xfc, 0xc7, 0x89, 0xf0, 0x83, 0x05, 0xda, 0xe3, 0x57, 0x9f, 0x97, 0x98, 0x9f, 0x80,
	0x6d, 0x39, 0x26, 0xf2, 0x3c, 0x63, 0x69, 0xb0, 0xf5, 0x3f, 0x73, 0x38, 0x73, 0xa4, 0xb8, 0xeb,
	0xe6, 0xb0, 0x08, 0x2b, 0x34, 0xdc, 0xb7, 0x35, 0x2b, 0xa4, 0x9f, 0xb1, 0x57, 0x1c, 0xe1, 0x05,
	0xc3, 0xff, 0x1e, 0xb4, 0x4a, 0x5d, 0x52, 0xd3, 0x8b, 0x20, 0x8a, 0x06, 0x0d, 0x73, 0xe9, 0x6f,
	0xde, 0xe2, 0xd2, 0x2f, 0x68, 0x52, 0x2a, 0x60, 0x35, 0xcf, 0x52, 0x01, 0xab, 0x38, 0xc2, 0x7b,
	0x06, 0xe8, 0xf1, 0x2b, 0x5c, 0x9a, 0xbf, 0xdf, 0x05, 0xf7, 0x9d, 0xc6, 0xab, 0x6f, 0xe3, 0x7f,
	0x05, 0xee, 0x33, 0xaa, 0x2e, 0xb9, 0x18, 0xf5, 0xc9, 0x70, 0x28, 0xa8, 0xb4, 0x7a, 0xdf, 0x89,
	0x8f, 0xe6, 0x1a, 0xde, 0x76, 0x15, 0x1a, 0xbe, 0x6b, 0x0b, 0xdd, 0x72, 0x20, 0xdc, 0x72, 0xc8,
	0x73, 0x0b, 0xf8, 0x04, 0x34, 0x26, 0xd3, 0xc1, 0x88, 0xce, 0x82, 0x3b, 0x66, 0x7d, 0xf6, 0x43,
	0xbb, 0xf6, 0x61, 0xb5, 0xf6, 0xe1, 0x73, 0x36, 0x8b, 0x4f, 0xcd, 0xce, 0x18, 0x5e, 0x6d, 0x67,
	0x8c, 0x8d, 0x7e, 0xfb, 0xf5, 0x68, 0xdf, 0x2d, 0x7b, 0x22, 0x66, 0x13, 0xc5, 0xc3, 0x97, 0xd3,
	0xc1, 0x67, 0x74, 0x86, 0x5d, 0x80, 0xff, 0x21, 0xb8, 0x27, 0xa7, 0x72, 0x42, 0xd9, 0x30, 0xd8,
	0xec, 0x78, 0xdd, 0xed, 0xf8, 0xf1, 0x5c, 0xc3, 0x0a, 0x2a, 0x34, 0x6c, 0xb9, 0x99, 0x58, 0x00,
	0xe1, 0xca, 0xe5, 0x7f, 0x0d, 0x1a, 0x52, 0x11, 0x35, 0x95, 0x46, 0x75, 0xad, 0x13, 0x14, 0xba,
	0x3a, 0xd5, 0xb3, 0xe1, 0x9e, 0x91, 0x30, 0xe6, 0x6c, 0x78, 0x66, 0x98, 0xf1, 0xa3, 0xb2, 0x53,
	0x1b, 0xb5, 0xec, 0xd4, 0xda, 0x08, 0x3b, 0x87, 0x7f, 0x0a, 0x1a, 0x8a, 0x8f, 0x28, 0x93, 0xc1,
	0x96, 0x99, 0xa1, 0x09, 0xb2, 0xc8, 0x32, 0xc8, 0xda, 0x08, 0x3b, 0x87, 0xdf, 0x03, 0x4d, 0x7e,
	0xc9, 0xa8, 0x58, 0xcc, 0xdf, 0xaa, 0xe2, 0xe9, 0x5c, 0xc3, 0x55, 0xc7, 0x52, 0x62, 0x2b, 0x30,
	0xc2, 0x7b, 0xc6, 0xae, 0x26, 0x9f, 0x83, 0xdd, 0x21, 0x95, 0x89, 0xc8, 0x26, 0x2a, 0xe3, 0x2c,
	0xb8, 0x67, 0xc6, 0xdf, 0x59, 0x2b, 0xe7, 0x17, 0x4b, 0x5e, 0xfc, 0xd4, 0x29, 0xba, 0x1e, 0x5c,
	0x68, 0xe8, 0xdb, 0x8a, 0x35, 0x10, 0xe1, 0x3a, 0x05, 0xfd, 0xe8, 0x81, 0xed, 0x6a, 0x2d, 0x7c,
	0x0c, 0x5a, 0x97, 0x64, 0x3c, 0xa6, 0xea, 0x96, 0x98, 0x3e, 0x28, 0x45, 0xbb, 0xea, 0x59, 0x8a,
	0x76, 0x15, 0x47, 0xb8, 0x69, 0x81, 0xea, 0x3e, 0x11, 0xd8, 0xba, 0x20, 0xe3, 0x29, 0x35, 0x42,
	0xda, 0x8c, 0x0f, 0xe6, 0x1a, 0x5a, 0xa0, 0xd0, 0x70, 0xcf, 0x66, 0x30, 0x26, 0xc2, 0x16, 0x8e,
	0x7b, 0xaf, 0xaf, 0xdb, 0xde, 0x9b, 0xeb, 0xb6, 0xf7, 0xf7, 0x75, 0xdb, 0xfb, 0xe9, 0xa6, 0xbd,
	0xf1, 0xe6, 0xa6, 0xbd, 0xf1, 0xc7, 0x4d, 0x7b, 0xe3, 0xdb, 0x67, 0xb5, 0x0d, 0x73, 0xf3, 0x60,
	0x54, 0x55, 0xc7, 0xa3, 0xe4, 0x9c, 0x64, 0x2c, 0xfa, 0x6e, 0xf9, 0x37, 0x61, 0x76, 0x6e, 0xd0,
	0x30, 0x92, 0x3d, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0xa7, 0xc5, 0x78, 0x0b, 0xf1, 0x06, 0x00,
	0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.StakeNozRate.Size()
		i -= size
		if _, err := m.StakeNozRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Slashing) > 0 {
		for iNdEx := len(m.Slashing) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Slashing[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.RemainingNozLimit.Size()
		i -= size
		if _, err := m.RemainingNozLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.MetaNodes) > 0 {
		for iNdEx := len(m.MetaNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MetaNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ResourceNodes) > 0 {
		for iNdEx := len(m.ResourceNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourceNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GenesisMetaNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisMetaNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisMetaNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tokens) > 0 {
		i -= len(m.Tokens)
		copy(dAtA[i:], m.Tokens)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Tokens)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Suspend {
		i--
		if m.Suspend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Slashing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Slashing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Slashing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.ResourceNodes) > 0 {
		for _, e := range m.ResourceNodes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.MetaNodes) > 0 {
		for _, e := range m.MetaNodes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.RemainingNozLimit.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Slashing) > 0 {
		for _, e := range m.Slashing {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.StakeNozRate.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *GenesisMetaNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Suspend {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovGenesis(uint64(m.Status))
	}
	l = len(m.Tokens)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Description.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *Slashing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovGenesis(uint64(m.Value))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceNodes = append(m.ResourceNodes, ResourceNode{})
			if err := m.ResourceNodes[len(m.ResourceNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaNodes = append(m.MetaNodes, MetaNode{})
			if err := m.MetaNodes[len(m.MetaNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingNozLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingNozLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slashing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slashing = append(m.Slashing, Slashing{})
			if err := m.Slashing[len(m.Slashing)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeNozRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakeNozRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisMetaNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisMetaNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisMetaNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suspend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Suspend = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types1.BondStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Slashing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Slashing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Slashing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
