// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stratos/register/v1_1/tx.proto

package v1_1

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateResourceNode encapsulates an MsgCreateResourceNodeTx transaction as an SDK message.
type MsgCreateResourceNode struct {
	NetworkAddress     string      `protobuf:"bytes,1,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	Pubkey             *types.Any  `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey" yaml:"pubkey"`
	Value              types1.Coin `protobuf:"bytes,3,opt,name=value,proto3" json:"value" yaml:"value"`
	OwnerAddress       string      `protobuf:"bytes,4,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
	BeneficiaryAddress string      `protobuf:"bytes,5,opt,name=beneficiary_address,json=beneficiaryAddress,proto3" json:"beneficiary_address" yaml:"beneficiary_address"`
	Description        Description `protobuf:"bytes,6,opt,name=description,proto3" json:"description" yaml:"description"`
	NodeType           uint32      `protobuf:"varint,7,opt,name=node_type,json=nodeType,proto3" json:"node_type" yaml:"node_type"`
}

func (m *MsgCreateResourceNode) Reset()         { *m = MsgCreateResourceNode{} }
func (m *MsgCreateResourceNode) String() string { return proto.CompactTextString(m) }
func (*MsgCreateResourceNode) ProtoMessage()    {}
func (*MsgCreateResourceNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8c1d106b648f05b, []int{0}
}
func (m *MsgCreateResourceNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateResourceNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateResourceNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateResourceNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateResourceNode.Merge(m, src)
}
func (m *MsgCreateResourceNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateResourceNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateResourceNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateResourceNode proto.InternalMessageInfo

func (m *MsgCreateResourceNode) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *MsgCreateResourceNode) GetPubkey() *types.Any {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *MsgCreateResourceNode) GetValue() types1.Coin {
	if m != nil {
		return m.Value
	}
	return types1.Coin{}
}

func (m *MsgCreateResourceNode) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgCreateResourceNode) GetBeneficiaryAddress() string {
	if m != nil {
		return m.BeneficiaryAddress
	}
	return ""
}

func (m *MsgCreateResourceNode) GetDescription() Description {
	if m != nil {
		return m.Description
	}
	return Description{}
}

func (m *MsgCreateResourceNode) GetNodeType() uint32 {
	if m != nil {
		return m.NodeType
	}
	return 0
}

// MsgCreateMetaNode encapsulates an MsgCreateMetaNodeTx transaction as an SDK message.
type MsgCreateMetaNode struct {
	NetworkAddress     string      `protobuf:"bytes,1,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	Pubkey             *types.Any  `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey" yaml:"pubkey"`
	Value              types1.Coin `protobuf:"bytes,3,opt,name=value,proto3" json:"value" yaml:"value"`
	OwnerAddress       string      `protobuf:"bytes,4,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
	BeneficiaryAddress string      `protobuf:"bytes,5,opt,name=beneficiary_address,json=beneficiaryAddress,proto3" json:"beneficiary_address" yaml:"beneficiary_address"`
	Description        Description `protobuf:"bytes,6,opt,name=description,proto3" json:"description" yaml:"description"`
}

func (m *MsgCreateMetaNode) Reset()         { *m = MsgCreateMetaNode{} }
func (m *MsgCreateMetaNode) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMetaNode) ProtoMessage()    {}
func (*MsgCreateMetaNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8c1d106b648f05b, []int{1}
}
func (m *MsgCreateMetaNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMetaNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMetaNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMetaNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMetaNode.Merge(m, src)
}
func (m *MsgCreateMetaNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMetaNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMetaNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMetaNode proto.InternalMessageInfo

func (m *MsgCreateMetaNode) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *MsgCreateMetaNode) GetPubkey() *types.Any {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *MsgCreateMetaNode) GetValue() types1.Coin {
	if m != nil {
		return m.Value
	}
	return types1.Coin{}
}

func (m *MsgCreateMetaNode) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgCreateMetaNode) GetBeneficiaryAddress() string {
	if m != nil {
		return m.BeneficiaryAddress
	}
	return ""
}

func (m *MsgCreateMetaNode) GetDescription() Description {
	if m != nil {
		return m.Description
	}
	return Description{}
}

// MsgUpdateResourceNode defines a SDK message for updating an existing resource node.
type MsgUpdateResourceNode struct {
	Description        Description `protobuf:"bytes,1,opt,name=description,proto3" json:"description" yaml:"description"`
	BeneficiaryAddress string      `protobuf:"bytes,2,opt,name=beneficiary_address,json=beneficiaryAddress,proto3" json:"beneficiary_address" yaml:"beneficiary_address"`
	NetworkAddress     string      `protobuf:"bytes,3,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	OwnerAddress       string      `protobuf:"bytes,4,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
	NodeType           uint32      `protobuf:"varint,5,opt,name=node_type,json=nodeType,proto3" json:"node_type" yaml:"node_type"`
}

func (m *MsgUpdateResourceNode) Reset()         { *m = MsgUpdateResourceNode{} }
func (m *MsgUpdateResourceNode) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateResourceNode) ProtoMessage()    {}
func (*MsgUpdateResourceNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8c1d106b648f05b, []int{2}
}
func (m *MsgUpdateResourceNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateResourceNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateResourceNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateResourceNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateResourceNode.Merge(m, src)
}
func (m *MsgUpdateResourceNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateResourceNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateResourceNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateResourceNode proto.InternalMessageInfo

func (m *MsgUpdateResourceNode) GetDescription() Description {
	if m != nil {
		return m.Description
	}
	return Description{}
}

func (m *MsgUpdateResourceNode) GetBeneficiaryAddress() string {
	if m != nil {
		return m.BeneficiaryAddress
	}
	return ""
}

func (m *MsgUpdateResourceNode) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *MsgUpdateResourceNode) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgUpdateResourceNode) GetNodeType() uint32 {
	if m != nil {
		return m.NodeType
	}
	return 0
}

// MsgUpdateMetaNode defines a SDK message for updating an existing meta node.
type MsgUpdateMetaNode struct {
	Description        Description `protobuf:"bytes,1,opt,name=description,proto3" json:"description" yaml:"description"`
	BeneficiaryAddress string      `protobuf:"bytes,2,opt,name=beneficiary_address,json=beneficiaryAddress,proto3" json:"beneficiary_address" yaml:"beneficiary_address"`
	NetworkAddress     string      `protobuf:"bytes,3,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	OwnerAddress       string      `protobuf:"bytes,4,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
}

func (m *MsgUpdateMetaNode) Reset()         { *m = MsgUpdateMetaNode{} }
func (m *MsgUpdateMetaNode) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMetaNode) ProtoMessage()    {}
func (*MsgUpdateMetaNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8c1d106b648f05b, []int{3}
}
func (m *MsgUpdateMetaNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMetaNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMetaNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMetaNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMetaNode.Merge(m, src)
}
func (m *MsgUpdateMetaNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMetaNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMetaNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMetaNode proto.InternalMessageInfo

func (m *MsgUpdateMetaNode) GetDescription() Description {
	if m != nil {
		return m.Description
	}
	return Description{}
}

func (m *MsgUpdateMetaNode) GetBeneficiaryAddress() string {
	if m != nil {
		return m.BeneficiaryAddress
	}
	return ""
}

func (m *MsgUpdateMetaNode) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *MsgUpdateMetaNode) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgCreateResourceNode)(nil), "stratos.register.v1_1.MsgCreateResourceNode")
	proto.RegisterType((*MsgCreateMetaNode)(nil), "stratos.register.v1_1.MsgCreateMetaNode")
	proto.RegisterType((*MsgUpdateResourceNode)(nil), "stratos.register.v1_1.MsgUpdateResourceNode")
	proto.RegisterType((*MsgUpdateMetaNode)(nil), "stratos.register.v1_1.MsgUpdateMetaNode")
}

func init() { proto.RegisterFile("stratos/register/v1_1/tx.proto", fileDescriptor_f8c1d106b648f05b) }

var fileDescriptor_f8c1d106b648f05b = []byte{
	// 709 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcf, 0x4f, 0xd4, 0x4c,
	0x18, 0xde, 0x02, 0xbb, 0xdf, 0x47, 0x81, 0xef, 0x93, 0xba, 0xe8, 0x42, 0x62, 0x07, 0x1b, 0x0f,
	0x84, 0x84, 0xa9, 0x2b, 0x5e, 0xe4, 0x60, 0xc2, 0xa2, 0x27, 0x83, 0x31, 0x8b, 0xc6, 0xc4, 0xcb,
	0xa6, 0xed, 0x0e, 0xa5, 0x81, 0x9d, 0x69, 0x3a, 0xb3, 0x0b, 0xbd, 0x78, 0xf0, 0xe8, 0xc9, 0x84,
	0x7f, 0x82, 0x23, 0x07, 0xff, 0x08, 0xa2, 0x17, 0xe2, 0xc9, 0xc4, 0x64, 0x62, 0x96, 0x03, 0xc9,
	0x1e, 0xfb, 0x17, 0x98, 0x9d, 0x99, 0xee, 0x2f, 0x4a, 0xe2, 0x05, 0x62, 0x0c, 0x97, 0xdd, 0x99,
	0xf7, 0x79, 0xda, 0xa7, 0xef, 0x3b, 0xef, 0xf3, 0xb6, 0xba, 0x49, 0x59, 0xe4, 0x30, 0x42, 0xed,
	0x08, 0xf9, 0x01, 0x65, 0x28, 0xb2, 0x5b, 0xe5, 0x5a, 0xd9, 0x66, 0x07, 0x30, 0x8c, 0x08, 0x23,
	0xc6, 0x9c, 0xc2, 0x61, 0x8a, 0xc3, 0x2e, 0xbe, 0x50, 0xf4, 0x89, 0x4f, 0x04, 0xc3, 0xee, 0xae,
	0x24, 0x79, 0x61, 0xde, 0x23, 0xb4, 0x41, 0x68, 0x4d, 0x02, 0x72, 0xa3, 0xa0, 0x59, 0xa7, 0x11,
	0x60, 0x62, 0x8b, 0x5f, 0x15, 0xba, 0x2b, 0x09, 0x76, 0x83, 0xfa, 0x76, 0xab, 0xdc, 0xfd, 0x53,
	0x80, 0xa9, 0x00, 0xd7, 0xa1, 0xc8, 0x6e, 0x95, 0x5d, 0xc4, 0x9c, 0xb2, 0xed, 0x91, 0x00, 0xa7,
	0x32, 0x3e, 0x21, 0xfe, 0x1e, 0xb2, 0xc5, 0xce, 0x6d, 0x6e, 0xdb, 0x0e, 0x8e, 0x15, 0xf4, 0x20,
	0x3b, 0x9d, 0xde, 0xc3, 0x0b, 0x96, 0x75, 0x58, 0xd0, 0xe7, 0x36, 0xa9, 0xbf, 0x11, 0x21, 0x87,
	0xa1, 0x2a, 0xa2, 0xa4, 0x19, 0x79, 0xe8, 0x25, 0xa9, 0x23, 0x03, 0xeb, 0xff, 0x63, 0xc4, 0xf6,
	0x49, 0xb4, 0x5b, 0x73, 0xea, 0xf5, 0x08, 0x51, 0x5a, 0xd2, 0x16, 0xb5, 0xa5, 0xc9, 0xca, 0xf3,
	0x0e, 0x07, 0xa3, 0x50, 0xc2, 0xc1, 0x9d, 0xd8, 0x69, 0xec, 0xad, 0x59, 0x23, 0x80, 0xf5, 0xed,
	0xf3, 0x4a, 0x51, 0xa5, 0xbf, 0x2e, 0x43, 0x5b, 0x2c, 0x0a, 0xb0, 0x5f, 0xfd, 0x4f, 0x31, 0x55,
	0xd4, 0x70, 0xf4, 0x42, 0xd8, 0x74, 0x77, 0x51, 0x5c, 0x1a, 0x5b, 0xd4, 0x96, 0xa6, 0x1e, 0x15,
	0xa1, 0xcc, 0x0d, 0xa6, 0xb9, 0xc1, 0x75, 0x1c, 0x57, 0x56, 0x3b, 0x1c, 0x28, 0x5e, 0xc2, 0xc1,
	0x8c, 0xd4, 0x94, 0x7b, 0xeb, 0x4b, 0x5f, 0xca, 0x8b, 0xe2, 0x90, 0x11, 0xf8, 0xaa, 0xe9, 0xbe,
	0x40, 0x71, 0x55, 0x5d, 0x60, 0x6c, 0xe9, 0xf9, 0x96, 0xb3, 0xd7, 0x44, 0xa5, 0x71, 0xa1, 0x30,
	0x0f, 0x15, 0xbb, 0x5b, 0x5d, 0xa8, 0xaa, 0x0b, 0x37, 0x48, 0x80, 0x2b, 0xd6, 0x09, 0x07, 0xb9,
	0x0e, 0x07, 0x92, 0x9f, 0x70, 0x30, 0x2d, 0x95, 0xc4, 0xd6, 0x3a, 0x3a, 0x3f, 0x5e, 0xd6, 0xaa,
	0x12, 0x33, 0xb6, 0xf5, 0x19, 0xb2, 0x8f, 0x51, 0xd4, 0xab, 0xd2, 0x84, 0xa8, 0xd2, 0x7a, 0x87,
	0x83, 0x61, 0x20, 0xe1, 0xa0, 0x28, 0xef, 0x32, 0x14, 0xbe, 0xbc, 0x42, 0xd3, 0x82, 0x97, 0xd6,
	0xe7, 0xbd, 0x7e, 0xdb, 0x45, 0x18, 0x6d, 0x07, 0x5e, 0xe0, 0x44, 0x71, 0x4f, 0x2d, 0x2f, 0xd4,
	0x36, 0x3b, 0x1c, 0x64, 0xc1, 0x09, 0x07, 0x0b, 0x52, 0x33, 0x03, 0xbc, 0x5c, 0xd9, 0x18, 0x60,
	0xa7, 0xfa, 0x4c, 0x9f, 0xaa, 0x23, 0xea, 0x45, 0x41, 0xc8, 0x02, 0x82, 0x4b, 0x05, 0x51, 0x42,
	0x0b, 0x66, 0x9a, 0x02, 0x3e, 0xeb, 0x33, 0x2b, 0x50, 0xd5, 0x72, 0xf0, 0xf2, 0x84, 0x03, 0x43,
	0x3e, 0xd7, 0x40, 0x50, 0xd5, 0x75, 0x90, 0x67, 0x3c, 0xd5, 0x27, 0x31, 0xa9, 0xa3, 0x1a, 0x8b,
	0x43, 0x54, 0xfa, 0x67, 0x51, 0x5b, 0x9a, 0xa9, 0xdc, 0xef, 0x70, 0xd0, 0x0f, 0x26, 0x1c, 0xdc,
	0x52, 0x9d, 0x97, 0x86, 0xac, 0xea, 0xbf, 0xdd, 0xf5, 0xeb, 0x38, 0x44, 0x6b, 0x8f, 0x3f, 0x9c,
	0x1f, 0x2f, 0x0f, 0x9f, 0xc3, 0xc7, 0xf3, 0xe3, 0xe5, 0x7b, 0xa9, 0x39, 0x32, 0x7b, 0xdf, 0xfa,
	0x9a, 0xd7, 0x67, 0x7b, 0xc8, 0x26, 0x62, 0xce, 0x8d, 0x23, 0x6e, 0x1c, 0xf1, 0x67, 0x38, 0x62,
	0xed, 0x61, 0x76, 0x47, 0xcf, 0x5f, 0xe8, 0xe8, 0xb4, 0x6f, 0xad, 0x1f, 0x13, 0x62, 0xc6, 0xbf,
	0x09, 0xeb, 0xa3, 0x33, 0x7e, 0x24, 0x03, 0xed, 0x7a, 0x3c, 0x7d, 0xc9, 0xb9, 0x8d, 0x5d, 0xd7,
	0xb9, 0x65, 0xf8, 0x78, 0xfc, 0x2a, 0x7d, 0x7c, 0x5d, 0x7e, 0x18, 0x9a, 0x95, 0xf9, 0x2b, 0x99,
	0x95, 0x17, 0x7b, 0xc8, 0x3a, 0x9c, 0x10, 0xb3, 0x52, 0x22, 0xbd, 0x59, 0x79, 0xd3, 0x59, 0x7f,
	0x51, 0x67, 0xfd, 0xce, 0xcc, 0x19, 0x3e, 0xff, 0xca, 0xdb, 0xa3, 0xb6, 0xa9, 0x9d, 0xb4, 0x4d,
	0xed, 0xb4, 0x6d, 0x6a, 0x3f, 0xdb, 0xa6, 0xf6, 0xe9, 0xcc, 0xcc, 0x9d, 0x9e, 0x99, 0xb9, 0xef,
	0x67, 0x66, 0xee, 0xdd, 0x13, 0x3f, 0x60, 0x3b, 0x4d, 0x17, 0x7a, 0xa4, 0x61, 0xab, 0x7b, 0x60,
	0xc4, 0xd2, 0xe5, 0x8a, 0xb7, 0xe3, 0x04, 0xd8, 0x3e, 0xe8, 0x7f, 0xb9, 0x76, 0x3b, 0x95, 0x8a,
	0xef, 0x57, 0xb7, 0x20, 0x5e, 0x7e, 0xab, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x07, 0x18, 0x75,
	0x36, 0xae, 0x0b, 0x00, 0x00,
}

func (this *MsgCreateResourceNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgCreateResourceNode)
	if !ok {
		that2, ok := that.(MsgCreateResourceNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetworkAddress != that1.NetworkAddress {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Value.Equal(&that1.Value) {
		return false
	}
	if this.OwnerAddress != that1.OwnerAddress {
		return false
	}
	if this.BeneficiaryAddress != that1.BeneficiaryAddress {
		return false
	}
	if !this.Description.Equal(&that1.Description) {
		return false
	}
	if this.NodeType != that1.NodeType {
		return false
	}
	return true
}
func (this *MsgCreateMetaNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgCreateMetaNode)
	if !ok {
		that2, ok := that.(MsgCreateMetaNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetworkAddress != that1.NetworkAddress {
		return false
	}
	if !this.Pubkey.Equal(that1.Pubkey) {
		return false
	}
	if !this.Value.Equal(&that1.Value) {
		return false
	}
	if this.OwnerAddress != that1.OwnerAddress {
		return false
	}
	if this.BeneficiaryAddress != that1.BeneficiaryAddress {
		return false
	}
	if !this.Description.Equal(&that1.Description) {
		return false
	}
	return true
}
func (this *MsgUpdateResourceNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUpdateResourceNode)
	if !ok {
		that2, ok := that.(MsgUpdateResourceNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Description.Equal(&that1.Description) {
		return false
	}
	if this.BeneficiaryAddress != that1.BeneficiaryAddress {
		return false
	}
	if this.NetworkAddress != that1.NetworkAddress {
		return false
	}
	if this.OwnerAddress != that1.OwnerAddress {
		return false
	}
	if this.NodeType != that1.NodeType {
		return false
	}
	return true
}
func (this *MsgUpdateMetaNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUpdateMetaNode)
	if !ok {
		that2, ok := that.(MsgUpdateMetaNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Description.Equal(&that1.Description) {
		return false
	}
	if this.BeneficiaryAddress != that1.BeneficiaryAddress {
		return false
	}
	if this.NetworkAddress != that1.NetworkAddress {
		return false
	}
	if this.OwnerAddress != that1.OwnerAddress {
		return false
	}
	return true
}
func (m *MsgCreateResourceNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateResourceNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateResourceNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NodeType))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.BeneficiaryAddress) > 0 {
		i -= len(m.BeneficiaryAddress)
		copy(dAtA[i:], m.BeneficiaryAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BeneficiaryAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMetaNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMetaNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMetaNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.BeneficiaryAddress) > 0 {
		i -= len(m.BeneficiaryAddress)
		copy(dAtA[i:], m.BeneficiaryAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BeneficiaryAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateResourceNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateResourceNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateResourceNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NodeType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BeneficiaryAddress) > 0 {
		i -= len(m.BeneficiaryAddress)
		copy(dAtA[i:], m.BeneficiaryAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BeneficiaryAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMetaNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMetaNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMetaNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BeneficiaryAddress) > 0 {
		i -= len(m.BeneficiaryAddress)
		copy(dAtA[i:], m.BeneficiaryAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BeneficiaryAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateResourceNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BeneficiaryAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Description.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.NodeType != 0 {
		n += 1 + sovTx(uint64(m.NodeType))
	}
	return n
}

func (m *MsgCreateMetaNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BeneficiaryAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Description.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateResourceNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Description.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.BeneficiaryAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NodeType != 0 {
		n += 1 + sovTx(uint64(m.NodeType))
	}
	return n
}

func (m *MsgUpdateMetaNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Description.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.BeneficiaryAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateResourceNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateResourceNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateResourceNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeneficiaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeneficiaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			m.NodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMetaNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMetaNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMetaNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeneficiaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeneficiaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateResourceNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateResourceNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateResourceNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeneficiaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeneficiaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			m.NodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMetaNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMetaNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMetaNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeneficiaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeneficiaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
