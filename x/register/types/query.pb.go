// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stratos/register/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	types2 "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryResourceNodeRequest is request type for the Query/ResourceNode RPC method
type QueryResourceNodeRequest struct {
	// network_addr defines the node network address to query for.
	NetworkAddr string `protobuf:"bytes,1,opt,name=network_addr,json=networkAddr,proto3" json:"network_addr,omitempty"`
}

func (m *QueryResourceNodeRequest) Reset()         { *m = QueryResourceNodeRequest{} }
func (m *QueryResourceNodeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryResourceNodeRequest) ProtoMessage()    {}
func (*QueryResourceNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{0}
}
func (m *QueryResourceNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResourceNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResourceNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResourceNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResourceNodeRequest.Merge(m, src)
}
func (m *QueryResourceNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryResourceNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResourceNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResourceNodeRequest proto.InternalMessageInfo

func (m *QueryResourceNodeRequest) GetNetworkAddr() string {
	if m != nil {
		return m.NetworkAddr
	}
	return ""
}

// QueryResourceNodeResponse is response type for the Query/ResourceNode RPC method
type QueryResourceNodeResponse struct {
	// node defines the the resourceNode info.
	Node *ResourceNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (m *QueryResourceNodeResponse) Reset()         { *m = QueryResourceNodeResponse{} }
func (m *QueryResourceNodeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResourceNodeResponse) ProtoMessage()    {}
func (*QueryResourceNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{1}
}
func (m *QueryResourceNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResourceNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResourceNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResourceNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResourceNodeResponse.Merge(m, src)
}
func (m *QueryResourceNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryResourceNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResourceNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResourceNodeResponse proto.InternalMessageInfo

func (m *QueryResourceNodeResponse) GetNode() *ResourceNode {
	if m != nil {
		return m.Node
	}
	return nil
}

// QueryMetaNodeRequest is request type for the Query/MetaNode RPC method
type QueryMetaNodeRequest struct {
	// network_addr defines the node network address to query for.
	NetworkAddr string `protobuf:"bytes,1,opt,name=network_addr,json=networkAddr,proto3" json:"network_addr,omitempty"`
}

func (m *QueryMetaNodeRequest) Reset()         { *m = QueryMetaNodeRequest{} }
func (m *QueryMetaNodeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMetaNodeRequest) ProtoMessage()    {}
func (*QueryMetaNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{2}
}
func (m *QueryMetaNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMetaNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMetaNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMetaNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMetaNodeRequest.Merge(m, src)
}
func (m *QueryMetaNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMetaNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMetaNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMetaNodeRequest proto.InternalMessageInfo

func (m *QueryMetaNodeRequest) GetNetworkAddr() string {
	if m != nil {
		return m.NetworkAddr
	}
	return ""
}

// QueryMetaNodeResponse is response type for the Query/MetaNode RPC method
type QueryMetaNodeResponse struct {
	// node defines the the meta info.
	Node *MetaNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (m *QueryMetaNodeResponse) Reset()         { *m = QueryMetaNodeResponse{} }
func (m *QueryMetaNodeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMetaNodeResponse) ProtoMessage()    {}
func (*QueryMetaNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{3}
}
func (m *QueryMetaNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMetaNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMetaNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMetaNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMetaNodeResponse.Merge(m, src)
}
func (m *QueryMetaNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMetaNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMetaNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMetaNodeResponse proto.InternalMessageInfo

func (m *QueryMetaNodeResponse) GetNode() *MetaNode {
	if m != nil {
		return m.Node
	}
	return nil
}

// QueryDepositByNodeRequest is request type for the Query/DepositByNode RPC method
type QueryDepositByNodeRequest struct {
	// network_addr defines the node network address to query for.
	NetworkAddr string `protobuf:"bytes,1,opt,name=network_addr,json=networkAddr,proto3" json:"network_addr,omitempty"`
	QueryType   uint32 `protobuf:"varint,2,opt,name=query_type,json=queryType,proto3" json:"query_type,omitempty"`
}

func (m *QueryDepositByNodeRequest) Reset()         { *m = QueryDepositByNodeRequest{} }
func (m *QueryDepositByNodeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepositByNodeRequest) ProtoMessage()    {}
func (*QueryDepositByNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{4}
}
func (m *QueryDepositByNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositByNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositByNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositByNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositByNodeRequest.Merge(m, src)
}
func (m *QueryDepositByNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositByNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositByNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositByNodeRequest proto.InternalMessageInfo

func (m *QueryDepositByNodeRequest) GetNetworkAddr() string {
	if m != nil {
		return m.NetworkAddr
	}
	return ""
}

func (m *QueryDepositByNodeRequest) GetQueryType() uint32 {
	if m != nil {
		return m.QueryType
	}
	return 0
}

// QueryDepositByNodeResponse is response type for the Query/DepositByNode RPC method
type QueryDepositByNodeResponse struct {
	// deposit_info defines the the deposit info of the node.
	DepositInfo *DepositInfo `protobuf:"bytes,1,opt,name=deposit_info,json=depositInfo,proto3" json:"deposit_info,omitempty"`
}

func (m *QueryDepositByNodeResponse) Reset()         { *m = QueryDepositByNodeResponse{} }
func (m *QueryDepositByNodeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepositByNodeResponse) ProtoMessage()    {}
func (*QueryDepositByNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{5}
}
func (m *QueryDepositByNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositByNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositByNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositByNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositByNodeResponse.Merge(m, src)
}
func (m *QueryDepositByNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositByNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositByNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositByNodeResponse proto.InternalMessageInfo

func (m *QueryDepositByNodeResponse) GetDepositInfo() *DepositInfo {
	if m != nil {
		return m.DepositInfo
	}
	return nil
}

// QueryDepositByOwnerRequest is request type for the Query/DepositByOwner RPC method
type QueryDepositByOwnerRequest struct {
	// owner_addr defines the owner address to query for.
	OwnerAddr string `protobuf:"bytes,1,opt,name=owner_addr,json=ownerAddr,proto3" json:"owner_addr,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDepositByOwnerRequest) Reset()         { *m = QueryDepositByOwnerRequest{} }
func (m *QueryDepositByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepositByOwnerRequest) ProtoMessage()    {}
func (*QueryDepositByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{6}
}
func (m *QueryDepositByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositByOwnerRequest.Merge(m, src)
}
func (m *QueryDepositByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositByOwnerRequest proto.InternalMessageInfo

func (m *QueryDepositByOwnerRequest) GetOwnerAddr() string {
	if m != nil {
		return m.OwnerAddr
	}
	return ""
}

func (m *QueryDepositByOwnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDepositByOwnerResponse is response type for the Query/DepositByOwner RPC method
type QueryDepositByOwnerResponse struct {
	// deposit_infos defines the the node deposit info of this owner.
	DepositInfos []*DepositInfo `protobuf:"bytes,1,rep,name=deposit_infos,json=depositInfos,proto3" json:"deposit_infos,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDepositByOwnerResponse) Reset()         { *m = QueryDepositByOwnerResponse{} }
func (m *QueryDepositByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepositByOwnerResponse) ProtoMessage()    {}
func (*QueryDepositByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{7}
}
func (m *QueryDepositByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositByOwnerResponse.Merge(m, src)
}
func (m *QueryDepositByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositByOwnerResponse proto.InternalMessageInfo

func (m *QueryDepositByOwnerResponse) GetDepositInfos() []*DepositInfo {
	if m != nil {
		return m.DepositInfos
	}
	return nil
}

func (m *QueryDepositByOwnerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDepositTotalRequest is request type for the Query/DepositTotal RPC method
type QueryDepositTotalRequest struct {
}

func (m *QueryDepositTotalRequest) Reset()         { *m = QueryDepositTotalRequest{} }
func (m *QueryDepositTotalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepositTotalRequest) ProtoMessage()    {}
func (*QueryDepositTotalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{8}
}
func (m *QueryDepositTotalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositTotalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositTotalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositTotalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositTotalRequest.Merge(m, src)
}
func (m *QueryDepositTotalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositTotalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositTotalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositTotalRequest proto.InternalMessageInfo

// QueryDepositTotalResponse is response type for the Query/DepositTotal RPC method
type QueryDepositTotalResponse struct {
	ResourceNodesTotalDeposit *types.Coin `protobuf:"bytes,1,opt,name=resource_nodes_total_deposit,json=resourceNodesTotalDeposit,proto3" json:"resource_nodes_total_deposit,omitempty"`
	MetaNodesTotalDeposit     *types.Coin `protobuf:"bytes,2,opt,name=meta_nodes_total_deposit,json=metaNodesTotalDeposit,proto3" json:"meta_nodes_total_deposit,omitempty"`
	TotalBondedDeposit        *types.Coin `protobuf:"bytes,3,opt,name=total_bonded_deposit,json=totalBondedDeposit,proto3" json:"total_bonded_deposit,omitempty"`
	TotalUnbondedDeposit      *types.Coin `protobuf:"bytes,4,opt,name=total_unbonded_deposit,json=totalUnbondedDeposit,proto3" json:"total_unbonded_deposit,omitempty"`
	TotalUnbondingDeposit     *types.Coin `protobuf:"bytes,5,opt,name=total_unbonding_deposit,json=totalUnbondingDeposit,proto3" json:"total_unbonding_deposit,omitempty"`
}

func (m *QueryDepositTotalResponse) Reset()         { *m = QueryDepositTotalResponse{} }
func (m *QueryDepositTotalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepositTotalResponse) ProtoMessage()    {}
func (*QueryDepositTotalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{9}
}
func (m *QueryDepositTotalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositTotalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositTotalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositTotalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositTotalResponse.Merge(m, src)
}
func (m *QueryDepositTotalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositTotalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositTotalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositTotalResponse proto.InternalMessageInfo

func (m *QueryDepositTotalResponse) GetResourceNodesTotalDeposit() *types.Coin {
	if m != nil {
		return m.ResourceNodesTotalDeposit
	}
	return nil
}

func (m *QueryDepositTotalResponse) GetMetaNodesTotalDeposit() *types.Coin {
	if m != nil {
		return m.MetaNodesTotalDeposit
	}
	return nil
}

func (m *QueryDepositTotalResponse) GetTotalBondedDeposit() *types.Coin {
	if m != nil {
		return m.TotalBondedDeposit
	}
	return nil
}

func (m *QueryDepositTotalResponse) GetTotalUnbondedDeposit() *types.Coin {
	if m != nil {
		return m.TotalUnbondedDeposit
	}
	return nil
}

func (m *QueryDepositTotalResponse) GetTotalUnbondingDeposit() *types.Coin {
	if m != nil {
		return m.TotalUnbondingDeposit
	}
	return nil
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{10}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{11}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

// QueryBondedResourceNodeCountRequest is request type for the Query/BondedResourceNodeCount RPC method.
type QueryBondedResourceNodeCountRequest struct {
}

func (m *QueryBondedResourceNodeCountRequest) Reset()         { *m = QueryBondedResourceNodeCountRequest{} }
func (m *QueryBondedResourceNodeCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBondedResourceNodeCountRequest) ProtoMessage()    {}
func (*QueryBondedResourceNodeCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{12}
}
func (m *QueryBondedResourceNodeCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBondedResourceNodeCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBondedResourceNodeCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBondedResourceNodeCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBondedResourceNodeCountRequest.Merge(m, src)
}
func (m *QueryBondedResourceNodeCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBondedResourceNodeCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBondedResourceNodeCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBondedResourceNodeCountRequest proto.InternalMessageInfo

// QueryBondedResourceNodeCountResponse is response type for the Query/BondedResourceNodeCount RPC method.
type QueryBondedResourceNodeCountResponse struct {
	// number holds the total number of resource nodes.
	Number uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *QueryBondedResourceNodeCountResponse) Reset()         { *m = QueryBondedResourceNodeCountResponse{} }
func (m *QueryBondedResourceNodeCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBondedResourceNodeCountResponse) ProtoMessage()    {}
func (*QueryBondedResourceNodeCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{13}
}
func (m *QueryBondedResourceNodeCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBondedResourceNodeCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBondedResourceNodeCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBondedResourceNodeCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBondedResourceNodeCountResponse.Merge(m, src)
}
func (m *QueryBondedResourceNodeCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBondedResourceNodeCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBondedResourceNodeCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBondedResourceNodeCountResponse proto.InternalMessageInfo

func (m *QueryBondedResourceNodeCountResponse) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

// QueryBondedMetaNodeCountRequest is request type for the Query/MetaNodeNumber RPC method.
type QueryBondedMetaNodeCountRequest struct {
}

func (m *QueryBondedMetaNodeCountRequest) Reset()         { *m = QueryBondedMetaNodeCountRequest{} }
func (m *QueryBondedMetaNodeCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBondedMetaNodeCountRequest) ProtoMessage()    {}
func (*QueryBondedMetaNodeCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{14}
}
func (m *QueryBondedMetaNodeCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBondedMetaNodeCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBondedMetaNodeCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBondedMetaNodeCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBondedMetaNodeCountRequest.Merge(m, src)
}
func (m *QueryBondedMetaNodeCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBondedMetaNodeCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBondedMetaNodeCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBondedMetaNodeCountRequest proto.InternalMessageInfo

// QueryBondedMetaNodeCountResponse is response type for the Query/MetaNodeNumber RPC method.
type QueryBondedMetaNodeCountResponse struct {
	// number holds the total number of meta nodes.
	Number uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *QueryBondedMetaNodeCountResponse) Reset()         { *m = QueryBondedMetaNodeCountResponse{} }
func (m *QueryBondedMetaNodeCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBondedMetaNodeCountResponse) ProtoMessage()    {}
func (*QueryBondedMetaNodeCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{15}
}
func (m *QueryBondedMetaNodeCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBondedMetaNodeCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBondedMetaNodeCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBondedMetaNodeCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBondedMetaNodeCountResponse.Merge(m, src)
}
func (m *QueryBondedMetaNodeCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBondedMetaNodeCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBondedMetaNodeCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBondedMetaNodeCountResponse proto.InternalMessageInfo

func (m *QueryBondedMetaNodeCountResponse) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

// QueryRemainingOzoneLimitRequest is request type for the Query/RemainingOzoneLimit RPC method.
type QueryRemainingOzoneLimitRequest struct {
}

func (m *QueryRemainingOzoneLimitRequest) Reset()         { *m = QueryRemainingOzoneLimitRequest{} }
func (m *QueryRemainingOzoneLimitRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRemainingOzoneLimitRequest) ProtoMessage()    {}
func (*QueryRemainingOzoneLimitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{16}
}
func (m *QueryRemainingOzoneLimitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRemainingOzoneLimitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRemainingOzoneLimitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRemainingOzoneLimitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRemainingOzoneLimitRequest.Merge(m, src)
}
func (m *QueryRemainingOzoneLimitRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRemainingOzoneLimitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRemainingOzoneLimitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRemainingOzoneLimitRequest proto.InternalMessageInfo

// QueryRemainingOzoneLimitResponse is response type for the Query/RemainingOzoneLimit RPC method.
type QueryRemainingOzoneLimitResponse struct {
	OzoneLimit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=ozone_limit,json=ozoneLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"ozone_limit" yaml:"ozone_limit"`
}

func (m *QueryRemainingOzoneLimitResponse) Reset()         { *m = QueryRemainingOzoneLimitResponse{} }
func (m *QueryRemainingOzoneLimitResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRemainingOzoneLimitResponse) ProtoMessage()    {}
func (*QueryRemainingOzoneLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{17}
}
func (m *QueryRemainingOzoneLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRemainingOzoneLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRemainingOzoneLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRemainingOzoneLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRemainingOzoneLimitResponse.Merge(m, src)
}
func (m *QueryRemainingOzoneLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRemainingOzoneLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRemainingOzoneLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRemainingOzoneLimitResponse proto.InternalMessageInfo

type DepositInfo struct {
	NetworkAddress   string                                 `protobuf:"bytes,1,opt,name=network_address,json=networkAddress,proto3" json:"network_address" yaml:"network_address"`
	Pubkey           *types1.Any                            `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey" yaml:"pubkey"`
	Suspend          bool                                   `protobuf:"varint,3,opt,name=suspend,proto3" json:"suspend" yaml:"suspend"`
	Status           types2.BondStatus                      `protobuf:"varint,4,opt,name=status,proto3,enum=cosmos.staking.v1beta1.BondStatus" json:"status" yaml:"status"`
	Tokens           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=tokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tokens" yaml:"tokens"`
	OwnerAddress     string                                 `protobuf:"bytes,6,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address" yaml:"owner_address"`
	Description      Description                            `protobuf:"bytes,7,opt,name=description,proto3" json:"description" yaml:"description"`
	CreationTime     time.Time                              `protobuf:"bytes,8,opt,name=creation_time,json=creationTime,proto3,stdtime" json:"creation_time" yaml:"creation_time"`
	NodeType         uint32                                 `protobuf:"varint,9,opt,name=node_type,json=nodeType,proto3" json:"node_type" yaml:"node_type"`
	BondedDeposit    types.Coin                             `protobuf:"bytes,10,opt,name=bonded_deposit,json=bondedDeposit,proto3" json:"bonded_deposit" yaml:"bonded_deposit"`
	UnBondingDeposit types.Coin                             `protobuf:"bytes,11,opt,name=un_bonding_deposit,json=unBondingDeposit,proto3" json:"un_bonding_deposit" yaml:"un_bonding_deposit"`
	UnBondedDeposit  types.Coin                             `protobuf:"bytes,12,opt,name=un_bonded_deposit,json=unBondedDeposit,proto3" json:"un_bonded_deposit" yaml:"un_bonded_deposit"`
}

func (m *DepositInfo) Reset()         { *m = DepositInfo{} }
func (m *DepositInfo) String() string { return proto.CompactTextString(m) }
func (*DepositInfo) ProtoMessage()    {}
func (*DepositInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_59a612d1da8c0670, []int{18}
}
func (m *DepositInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositInfo.Merge(m, src)
}
func (m *DepositInfo) XXX_Size() int {
	return m.Size()
}
func (m *DepositInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DepositInfo proto.InternalMessageInfo

func (m *DepositInfo) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *DepositInfo) GetPubkey() *types1.Any {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *DepositInfo) GetSuspend() bool {
	if m != nil {
		return m.Suspend
	}
	return false
}

func (m *DepositInfo) GetStatus() types2.BondStatus {
	if m != nil {
		return m.Status
	}
	return types2.Unspecified
}

func (m *DepositInfo) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *DepositInfo) GetDescription() Description {
	if m != nil {
		return m.Description
	}
	return Description{}
}

func (m *DepositInfo) GetCreationTime() time.Time {
	if m != nil {
		return m.CreationTime
	}
	return time.Time{}
}

func (m *DepositInfo) GetNodeType() uint32 {
	if m != nil {
		return m.NodeType
	}
	return 0
}

func (m *DepositInfo) GetBondedDeposit() types.Coin {
	if m != nil {
		return m.BondedDeposit
	}
	return types.Coin{}
}

func (m *DepositInfo) GetUnBondingDeposit() types.Coin {
	if m != nil {
		return m.UnBondingDeposit
	}
	return types.Coin{}
}

func (m *DepositInfo) GetUnBondedDeposit() types.Coin {
	if m != nil {
		return m.UnBondedDeposit
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*QueryResourceNodeRequest)(nil), "stratos.register.v1.QueryResourceNodeRequest")
	proto.RegisterType((*QueryResourceNodeResponse)(nil), "stratos.register.v1.QueryResourceNodeResponse")
	proto.RegisterType((*QueryMetaNodeRequest)(nil), "stratos.register.v1.QueryMetaNodeRequest")
	proto.RegisterType((*QueryMetaNodeResponse)(nil), "stratos.register.v1.QueryMetaNodeResponse")
	proto.RegisterType((*QueryDepositByNodeRequest)(nil), "stratos.register.v1.QueryDepositByNodeRequest")
	proto.RegisterType((*QueryDepositByNodeResponse)(nil), "stratos.register.v1.QueryDepositByNodeResponse")
	proto.RegisterType((*QueryDepositByOwnerRequest)(nil), "stratos.register.v1.QueryDepositByOwnerRequest")
	proto.RegisterType((*QueryDepositByOwnerResponse)(nil), "stratos.register.v1.QueryDepositByOwnerResponse")
	proto.RegisterType((*QueryDepositTotalRequest)(nil), "stratos.register.v1.QueryDepositTotalRequest")
	proto.RegisterType((*QueryDepositTotalResponse)(nil), "stratos.register.v1.QueryDepositTotalResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "stratos.register.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "stratos.register.v1.QueryParamsResponse")
	proto.RegisterType((*QueryBondedResourceNodeCountRequest)(nil), "stratos.register.v1.QueryBondedResourceNodeCountRequest")
	proto.RegisterType((*QueryBondedResourceNodeCountResponse)(nil), "stratos.register.v1.QueryBondedResourceNodeCountResponse")
	proto.RegisterType((*QueryBondedMetaNodeCountRequest)(nil), "stratos.register.v1.QueryBondedMetaNodeCountRequest")
	proto.RegisterType((*QueryBondedMetaNodeCountResponse)(nil), "stratos.register.v1.QueryBondedMetaNodeCountResponse")
	proto.RegisterType((*QueryRemainingOzoneLimitRequest)(nil), "stratos.register.v1.QueryRemainingOzoneLimitRequest")
	proto.RegisterType((*QueryRemainingOzoneLimitResponse)(nil), "stratos.register.v1.QueryRemainingOzoneLimitResponse")
	proto.RegisterType((*DepositInfo)(nil), "stratos.register.v1.DepositInfo")
}

func init() { proto.RegisterFile("stratos/register/v1/query.proto", fileDescriptor_59a612d1da8c0670) }

var fileDescriptor_59a612d1da8c0670 = []byte{
	// 1554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcd, 0x6f, 0x13, 0x47,
	0x14, 0xcf, 0xf2, 0x11, 0x92, 0xb1, 0x13, 0xe8, 0x24, 0x80, 0xe3, 0x10, 0x6f, 0x32, 0x50, 0x3e,
	0xa2, 0x66, 0x97, 0x04, 0x28, 0x05, 0xa9, 0xa8, 0x98, 0x7e, 0x01, 0x2d, 0x1f, 0x0b, 0x6d, 0x25,
	0xa4, 0xca, 0x5a, 0xdb, 0x83, 0x59, 0x25, 0x9e, 0x31, 0x3b, 0x6b, 0xa8, 0x4b, 0x91, 0x50, 0xfb,
	0x0f, 0x20, 0xf5, 0xd2, 0xde, 0x7b, 0x69, 0xa5, 0xaa, 0x97, 0x8a, 0x43, 0xd5, 0x3f, 0x00, 0xf5,
	0x84, 0xd4, 0x4b, 0xd5, 0xc3, 0xb6, 0x82, 0x9e, 0x72, 0xf4, 0xb9, 0x87, 0x6a, 0x67, 0xde, 0xda,
	0xb3, 0x66, 0xfd, 0x91, 0x9e, 0x92, 0x79, 0xf3, 0xde, 0xef, 0xfd, 0xde, 0xce, 0x9b, 0x37, 0x3f,
	0x23, 0x53, 0x04, 0xbe, 0x1b, 0x70, 0x61, 0xfb, 0xb4, 0xe6, 0x89, 0x80, 0xfa, 0xf6, 0xbd, 0x55,
	0xfb, 0x6e, 0x93, 0xfa, 0x2d, 0xab, 0xe1, 0xf3, 0x80, 0xe3, 0x19, 0x70, 0xb0, 0x62, 0x07, 0xeb,
	0xde, 0x6a, 0x7e, 0xb6, 0xc6, 0x6b, 0x5c, 0xee, 0xdb, 0xd1, 0x7f, 0xca, 0x35, 0x3f, 0x57, 0xe3,
	0xbc, 0xb6, 0x41, 0x6d, 0xb9, 0x2a, 0x37, 0x6f, 0xdb, 0x2e, 0x03, 0x94, 0xbc, 0xd9, 0xbb, 0x15,
	0x78, 0x75, 0x2a, 0x02, 0xb7, 0xde, 0x00, 0x87, 0x03, 0xe0, 0xe0, 0x36, 0x3c, 0xdb, 0x65, 0x8c,
	0x07, 0x6e, 0xe0, 0x71, 0x26, 0x62, 0xe4, 0x0a, 0x17, 0x75, 0x2e, 0x4a, 0x2a, 0xa5, 0x5a, 0xc0,
	0xd6, 0xb2, 0x5a, 0xd9, 0x65, 0x57, 0x50, 0x45, 0xdc, 0xbe, 0xb7, 0x5a, 0xa6, 0x81, 0xbb, 0x6a,
	0x37, 0xdc, 0x9a, 0xc7, 0x24, 0x0e, 0xf8, 0x16, 0x74, 0xdf, 0xd8, 0xab, 0xc2, 0xbd, 0x78, 0xff,
	0x10, 0xec, 0x8b, 0xc0, 0x5d, 0xf7, 0x58, 0xad, 0xe3, 0x02, 0x6b, 0xf0, 0x22, 0x69, 0x9f, 0xac,
	0xf3, 0x75, 0xa4, 0x0f, 0x79, 0x13, 0xe5, 0xae, 0x47, 0x5c, 0x1c, 0x2a, 0x78, 0xd3, 0xaf, 0xd0,
	0x2b, 0xbc, 0x4a, 0x1d, 0x7a, 0xb7, 0x49, 0x45, 0x80, 0x97, 0x50, 0x96, 0xd1, 0xe0, 0x3e, 0xf7,
	0xd7, 0x4b, 0x6e, 0xb5, 0xea, 0xe7, 0x8c, 0x45, 0xe3, 0xe8, 0xa4, 0x93, 0x01, 0xdb, 0xf9, 0x6a,
	0xd5, 0x27, 0x0e, 0x9a, 0x4b, 0x09, 0x17, 0x0d, 0xce, 0x04, 0xc5, 0xa7, 0xd0, 0x0e, 0xc6, 0xab,
	0x54, 0xc6, 0x65, 0xd6, 0x96, 0xac, 0x94, 0x03, 0xb2, 0x12, 0x81, 0xd2, 0x9d, 0x9c, 0x41, 0xb3,
	0x12, 0xf3, 0x43, 0x1a, 0xb8, 0x5b, 0xa4, 0x73, 0x09, 0xed, 0xed, 0x09, 0x05, 0x2a, 0xab, 0x09,
	0x2a, 0x0b, 0xa9, 0x54, 0x3a, 0x41, 0x8a, 0xc6, 0xa7, 0x50, 0xda, 0xdb, 0xb4, 0xc1, 0x85, 0x17,
	0x14, 0x5b, 0x5b, 0xe3, 0x82, 0x17, 0x10, 0x92, 0xa7, 0x5c, 0x0a, 0x5a, 0x0d, 0x9a, 0xdb, 0xb6,
	0x68, 0x1c, 0x9d, 0x72, 0x26, 0xa5, 0xe5, 0x66, 0xab, 0x41, 0x89, 0x8b, 0xf2, 0x69, 0xf0, 0xc0,
	0xf7, 0x02, 0xca, 0x56, 0xd5, 0x46, 0xc9, 0x63, 0xb7, 0x39, 0xf0, 0x5e, 0x4c, 0xe5, 0x0d, 0x08,
	0x17, 0xd9, 0x6d, 0xee, 0x64, 0xaa, 0xdd, 0x05, 0xf9, 0xca, 0xe8, 0xcd, 0x71, 0xf5, 0x3e, 0xa3,
	0x7e, 0x5c, 0xc3, 0x02, 0x42, 0x3c, 0x5a, 0xeb, 0x15, 0x4c, 0x4a, 0x8b, 0xe4, 0xff, 0x2e, 0x42,
	0xdd, 0xbe, 0x94, 0xfc, 0x33, 0x6b, 0x87, 0x2d, 0x68, 0xe9, 0xa8, 0x31, 0x2d, 0x75, 0xfb, 0xa0,
	0xf7, 0xac, 0x6b, 0x6e, 0x2d, 0xfe, 0x3c, 0x8e, 0x16, 0x49, 0x7e, 0x34, 0xd0, 0x7c, 0x2a, 0x0b,
	0x28, 0xf5, 0x1d, 0x34, 0xa5, 0x97, 0x2a, 0x72, 0xc6, 0xe2, 0xf6, 0x91, 0x6a, 0xcd, 0x6a, 0xb5,
	0x0a, 0xfc, 0x5e, 0x0a, 0xdd, 0x23, 0x43, 0xe9, 0x2a, 0x0e, 0x09, 0xbe, 0x79, 0xb8, 0x11, 0x90,
	0xea, 0x26, 0x0f, 0xdc, 0x0d, 0xa8, 0x8b, 0xfc, 0xba, 0x3d, 0xd9, 0x14, 0xb0, 0x09, 0x95, 0xdc,
	0x42, 0x07, 0x7c, 0x68, 0xe7, 0x52, 0xd4, 0x42, 0xa2, 0x14, 0x44, 0xfb, 0x25, 0xe0, 0x09, 0x87,
	0x38, 0x97, 0x20, 0x15, 0xd3, 0xb9, 0xc0, 0x3d, 0xe6, 0xcc, 0xf9, 0xda, 0x6d, 0x10, 0x12, 0x1c,
	0x12, 0x61, 0x07, 0xe5, 0xea, 0x34, 0x70, 0x53, 0x71, 0xb7, 0x0d, 0xc3, 0xdd, 0x5b, 0x87, 0xd6,
	0x4e, 0x62, 0x5e, 0x46, 0xb3, 0x0a, 0xa8, 0xcc, 0x59, 0x95, 0x56, 0x3b, 0x78, 0xdb, 0x87, 0xe1,
	0x61, 0x19, 0x56, 0x94, 0x51, 0x31, 0xd8, 0x55, 0xb4, 0x4f, 0x81, 0x35, 0x59, 0x0f, 0xdc, 0x8e,
	0x61, 0x70, 0x8a, 0xc5, 0x47, 0x10, 0x17, 0x03, 0x5e, 0x47, 0xfb, 0x75, 0x40, 0x8f, 0xd5, 0x3a,
	0x88, 0x3b, 0x87, 0x16, 0xac, 0x21, 0x7a, 0xac, 0x06, 0x90, 0x64, 0x16, 0x61, 0x79, 0x7a, 0xd7,
	0x5c, 0xdf, 0xad, 0x8b, 0xf8, 0x50, 0x2f, 0xa1, 0x99, 0x84, 0x15, 0x4e, 0xf3, 0x04, 0x1a, 0x6f,
	0x48, 0x0b, 0x9c, 0xdb, 0x7c, 0x6a, 0x43, 0x42, 0x10, 0xb8, 0x92, 0x57, 0xd1, 0x41, 0x89, 0xa5,
	0xbe, 0x8d, 0x3e, 0xdc, 0x2e, 0xf0, 0x26, 0x0b, 0xe2, 0x94, 0xe7, 0xd0, 0xa1, 0xc1, 0x6e, 0xc0,
	0x61, 0x1f, 0x1a, 0x67, 0xcd, 0x7a, 0x99, 0xaa, 0xeb, 0xb9, 0xc3, 0x81, 0x15, 0x59, 0x42, 0xa6,
	0x16, 0x1f, 0x0f, 0xae, 0x44, 0x8a, 0xb3, 0x68, 0xb1, 0xbf, 0xcb, 0x88, 0xf0, 0x0e, 0xad, 0xbb,
	0x1e, 0xf3, 0x58, 0xed, 0xea, 0xe7, 0x9c, 0xd1, 0x0f, 0xbc, 0xba, 0xd7, 0x81, 0xff, 0xc6, 0x00,
	0xfc, 0x54, 0x1f, 0xc0, 0x0f, 0x50, 0x86, 0x47, 0xd6, 0xd2, 0x46, 0x64, 0x56, 0x23, 0xa6, 0x78,
	0xe3, 0x69, 0x68, 0x8e, 0xfd, 0x19, 0x9a, 0x87, 0x6b, 0x5e, 0x70, 0xa7, 0x59, 0xb6, 0x2a, 0xbc,
	0x0e, 0x0f, 0x25, 0xfc, 0x59, 0x11, 0xd5, 0x75, 0x3b, 0x1a, 0x9a, 0xc2, 0xba, 0xc8, 0x82, 0xcd,
	0xd0, 0xd4, 0x41, 0xda, 0xa1, 0x89, 0x5b, 0x6e, 0x7d, 0xe3, 0x2c, 0xd1, 0x8c, 0xc4, 0x41, 0xbc,
	0x93, 0x9d, 0x7c, 0x37, 0x89, 0x32, 0xda, 0x9c, 0xc0, 0x1f, 0xa3, 0xdd, 0xfa, 0xac, 0xa6, 0x42,
	0x00, 0x93, 0x95, 0xcd, 0xd0, 0xec, 0xdd, 0x6a, 0x87, 0xe6, 0x3e, 0x85, 0xdf, 0xb3, 0x41, 0x9c,
	0x69, 0x6d, 0xba, 0x53, 0x21, 0xb0, 0x8b, 0xc6, 0x1b, 0xcd, 0xf2, 0x3a, 0x6d, 0xc1, 0x05, 0x9c,
	0xb5, 0x94, 0x34, 0xb0, 0x62, 0xed, 0x60, 0x9d, 0x67, 0xad, 0xe2, 0x89, 0xcd, 0xd0, 0x04, 0xbf,
	0x76, 0x68, 0x4e, 0x29, 0x6c, 0xb5, 0x26, 0xbf, 0xfd, 0xbc, 0x32, 0x0b, 0x3d, 0x5c, 0xf1, 0x5b,
	0x8d, 0x80, 0x5b, 0xd7, 0x9a, 0xe5, 0xcb, 0xb4, 0xe5, 0x40, 0x00, 0x3e, 0x8d, 0x76, 0x89, 0xa6,
	0x68, 0x50, 0x56, 0x95, 0x97, 0x72, 0xa2, 0xb8, 0xb0, 0x19, 0x9a, 0xb1, 0xa9, 0x1d, 0x9a, 0xd3,
	0x0a, 0x0e, 0x0c, 0xc4, 0x89, 0xb7, 0xf0, 0x27, 0x68, 0x5c, 0x04, 0x6e, 0xd0, 0x14, 0xf2, 0xf6,
	0x4d, 0xaf, 0x91, 0xf8, 0xae, 0xc4, 0x0a, 0x21, 0xbe, 0x2e, 0x51, 0x7b, 0xdc, 0x90, 0x9e, 0xc5,
	0xf9, 0x88, 0xa9, 0x8a, 0xea, 0x32, 0x55, 0x6b, 0xe2, 0xc0, 0x46, 0x54, 0x74, 0xc0, 0xd7, 0x29,
	0x13, 0xf2, 0x12, 0x4e, 0x16, 0x2f, 0x6e, 0xf9, 0x34, 0x21, 0xbe, 0x9b, 0x42, 0xad, 0x89, 0x03,
	0x1b, 0xf8, 0x0a, 0x9a, 0xea, 0xbe, 0x4b, 0xd1, 0x69, 0x8d, 0xcb, 0x4c, 0xc7, 0x36, 0x43, 0x33,
	0xb9, 0xd1, 0x0e, 0xcd, 0x59, 0xe8, 0x05, 0xdd, 0x4c, 0x9c, 0x6c, 0xe7, 0x15, 0x8b, 0xce, 0xa9,
	0x8e, 0x32, 0x55, 0x2a, 0x2a, 0xbe, 0xd7, 0x90, 0x4f, 0xc3, 0xae, 0x81, 0x4f, 0x69, 0xc7, 0xaf,
	0x78, 0x2c, 0xaa, 0x2c, 0xea, 0x3e, 0x2d, 0xb8, 0xdb, 0x7d, 0x9a, 0x91, 0x38, 0xba, 0x0b, 0xf6,
	0xd1, 0x54, 0xc5, 0xa7, 0xf2, 0x2d, 0x29, 0x45, 0xe2, 0x31, 0x37, 0x21, 0x13, 0xe6, 0x5f, 0xea,
	0x8e, 0x9b, 0xb1, 0xb2, 0x2c, 0xae, 0x42, 0xaa, 0x64, 0x60, 0xb7, 0xbc, 0x84, 0x99, 0x3c, 0xfe,
	0xcb, 0x34, 0x9c, 0x6c, 0x6c, 0x8b, 0x50, 0xf0, 0x39, 0x34, 0x19, 0x3d, 0x0c, 0x4a, 0x6a, 0x4c,
	0x46, 0x52, 0xa3, 0xb8, 0xb4, 0x19, 0x9a, 0x5d, 0x63, 0x3b, 0x34, 0xf7, 0x40, 0x5b, 0xc7, 0x26,
	0xe2, 0x4c, 0x44, 0xff, 0x47, 0x62, 0x04, 0xdf, 0x45, 0xd3, 0x3d, 0x43, 0x1b, 0x0d, 0x19, 0xb1,
	0x45, 0x1b, 0x38, 0xf7, 0x04, 0xb6, 0x43, 0x73, 0xaf, 0x4a, 0x94, 0xb4, 0x13, 0x67, 0x2a, 0x39,
	0xde, 0x1f, 0x19, 0x08, 0x37, 0x59, 0xa9, 0x77, 0xb4, 0x67, 0x86, 0xe5, 0x3d, 0x0d, 0x79, 0x53,
	0x82, 0xdb, 0xa1, 0x39, 0xa7, 0x72, 0xbf, 0xbc, 0x47, 0x9c, 0x3d, 0x4d, 0x56, 0x4c, 0x3c, 0x07,
	0xf8, 0x0b, 0xf4, 0x0a, 0x38, 0x6a, 0x85, 0x67, 0x87, 0x11, 0x38, 0x05, 0x04, 0x5e, 0x8e, 0x6d,
	0x87, 0x66, 0x2e, 0x91, 0x5f, 0x2f, 0x7f, 0xb7, 0x4a, 0xdf, 0xf9, 0x00, 0x6b, 0xff, 0x66, 0xd0,
	0x4e, 0x39, 0x41, 0xf1, 0xf7, 0x06, 0xca, 0xea, 0x6f, 0x00, 0x5e, 0x49, 0x6d, 0xce, 0x7e, 0x3a,
	0x3d, 0x6f, 0x8d, 0xea, 0xae, 0xc6, 0x32, 0x39, 0xfb, 0xe5, 0xef, 0xff, 0x7c, 0xbd, 0xed, 0x24,
	0x5e, 0xb3, 0xd3, 0x7f, 0x20, 0xa8, 0x90, 0x15, 0x29, 0x35, 0xec, 0x07, 0xfa, 0x1c, 0x7c, 0x88,
	0xbf, 0x35, 0xd0, 0x44, 0xfc, 0x98, 0xe0, 0x63, 0xfd, 0x13, 0xf7, 0x88, 0xf7, 0xfc, 0xf2, 0x28,
	0xae, 0xc0, 0xef, 0x75, 0xc9, 0xef, 0x38, 0xb6, 0x52, 0xf9, 0x45, 0x5a, 0x26, 0x9d, 0xdb, 0x23,
	0x03, 0x8d, 0xab, 0xf7, 0x18, 0x1f, 0xe9, 0x9f, 0x2e, 0xf1, 0xf8, 0xe7, 0x8f, 0x0e, 0x77, 0x04,
	0x56, 0x07, 0x25, 0xab, 0x05, 0x3c, 0x9f, 0xca, 0x4a, 0xbd, 0xff, 0xf8, 0x17, 0x03, 0x4d, 0x25,
	0x14, 0x3d, 0x1e, 0x70, 0x38, 0x69, 0xbf, 0x2c, 0xf2, 0xf6, 0xc8, 0xfe, 0xc0, 0xeb, 0x7d, 0xc9,
	0xab, 0x88, 0xdf, 0x4a, 0xe5, 0x15, 0x4b, 0xeb, 0x72, 0x4b, 0x4a, 0xc7, 0x9e, 0x4f, 0x66, 0x3f,
	0xe8, 0xfe, 0x44, 0x79, 0x88, 0x7f, 0x32, 0xd0, 0x74, 0x52, 0xa4, 0xe3, 0x51, 0xd8, 0xe8, 0x3f,
	0x2a, 0xf2, 0xc7, 0x47, 0x0f, 0x18, 0xa9, 0x1b, 0x35, 0xfe, 0x72, 0xa8, 0xdb, 0x0f, 0xba, 0xb3,
	0x5e, 0x76, 0x63, 0x56, 0x97, 0xe2, 0x83, 0x6e, 0x4e, 0x8a, 0x9e, 0xcf, 0x5b, 0xa3, 0xba, 0x03,
	0xd7, 0x65, 0xc9, 0xf5, 0x10, 0x26, 0x03, 0xb9, 0x4a, 0xf1, 0x89, 0x9f, 0x18, 0x68, 0x7f, 0x1f,
	0x7d, 0x87, 0xdf, 0xe8, 0x9f, 0x77, 0xb0, 0x72, 0xcc, 0x9f, 0xf9, 0x1f, 0x91, 0x40, 0xfe, 0xb0,
	0x24, 0xbf, 0x88, 0x0b, 0xe9, 0x0d, 0xdc, 0x28, 0x29, 0xf5, 0x87, 0x7f, 0x30, 0xd0, 0x4c, 0x8a,
	0x6a, 0xc4, 0x27, 0x87, 0xa5, 0x4e, 0xd3, 0xa1, 0xf9, 0x53, 0x5b, 0x8c, 0x1a, 0x89, 0xac, 0xe8,
	0x90, 0x7d, 0x62, 0xa0, 0x99, 0x14, 0x09, 0x3a, 0x88, 0x6c, 0x7f, 0x55, 0x3b, 0x88, 0xec, 0x00,
	0x9d, 0x4b, 0xd6, 0x24, 0xd9, 0xd7, 0xf0, 0x72, 0x9f, 0x81, 0x0a, 0x91, 0x25, 0x4d, 0xb2, 0x16,
	0xaf, 0x3c, 0x7d, 0x5e, 0x30, 0x9e, 0x3d, 0x2f, 0x18, 0x7f, 0x3f, 0x2f, 0x18, 0x8f, 0x5f, 0x14,
	0xc6, 0x9e, 0xbd, 0x28, 0x8c, 0xfd, 0xf1, 0xa2, 0x30, 0x76, 0xeb, 0xa4, 0x26, 0xa5, 0x00, 0x8f,
	0xd1, 0x20, 0xfe, 0x77, 0xa5, 0x72, 0xc7, 0xf5, 0x98, 0xfd, 0x59, 0x37, 0x85, 0x14, 0x57, 0xe5,
	0x71, 0xa9, 0x2b, 0x4e, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0x05, 0x15, 0x08, 0x32, 0x28, 0x13,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ResourceNode queries ResourceNode info for given ResourceNode address.
	ResourceNode(ctx context.Context, in *QueryResourceNodeRequest, opts ...grpc.CallOption) (*QueryResourceNodeResponse, error)
	// MetaNode queries MetaNode info for given MetaNode address.
	MetaNode(ctx context.Context, in *QueryMetaNodeRequest, opts ...grpc.CallOption) (*QueryMetaNodeResponse, error)
	// Params queries Register module Params info.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// DepositByNode queries all deposit info for given node network address.
	DepositByNode(ctx context.Context, in *QueryDepositByNodeRequest, opts ...grpc.CallOption) (*QueryDepositByNodeResponse, error)
	// DepositByOwner queries all deposit info for given owner address.
	DepositByOwner(ctx context.Context, in *QueryDepositByOwnerRequest, opts ...grpc.CallOption) (*QueryDepositByOwnerResponse, error)
	// DepositTotal queries all deposit info.
	DepositTotal(ctx context.Context, in *QueryDepositTotalRequest, opts ...grpc.CallOption) (*QueryDepositTotalResponse, error)
	// BondedResourceNodeCount queries total number of ResourceNodes.
	BondedResourceNodeCount(ctx context.Context, in *QueryBondedResourceNodeCountRequest, opts ...grpc.CallOption) (*QueryBondedResourceNodeCountResponse, error)
	// BondedMetaNodeCount queries total number of MetaNodes.
	BondedMetaNodeCount(ctx context.Context, in *QueryBondedMetaNodeCountRequest, opts ...grpc.CallOption) (*QueryBondedMetaNodeCountResponse, error)
	// RemainingOzoneLimit returns the current remaining ozone limit.
	RemainingOzoneLimit(ctx context.Context, in *QueryRemainingOzoneLimitRequest, opts ...grpc.CallOption) (*QueryRemainingOzoneLimitResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ResourceNode(ctx context.Context, in *QueryResourceNodeRequest, opts ...grpc.CallOption) (*QueryResourceNodeResponse, error) {
	out := new(QueryResourceNodeResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Query/ResourceNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MetaNode(ctx context.Context, in *QueryMetaNodeRequest, opts ...grpc.CallOption) (*QueryMetaNodeResponse, error) {
	out := new(QueryMetaNodeResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Query/MetaNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositByNode(ctx context.Context, in *QueryDepositByNodeRequest, opts ...grpc.CallOption) (*QueryDepositByNodeResponse, error) {
	out := new(QueryDepositByNodeResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Query/DepositByNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositByOwner(ctx context.Context, in *QueryDepositByOwnerRequest, opts ...grpc.CallOption) (*QueryDepositByOwnerResponse, error) {
	out := new(QueryDepositByOwnerResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Query/DepositByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositTotal(ctx context.Context, in *QueryDepositTotalRequest, opts ...grpc.CallOption) (*QueryDepositTotalResponse, error) {
	out := new(QueryDepositTotalResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Query/DepositTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BondedResourceNodeCount(ctx context.Context, in *QueryBondedResourceNodeCountRequest, opts ...grpc.CallOption) (*QueryBondedResourceNodeCountResponse, error) {
	out := new(QueryBondedResourceNodeCountResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Query/BondedResourceNodeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BondedMetaNodeCount(ctx context.Context, in *QueryBondedMetaNodeCountRequest, opts ...grpc.CallOption) (*QueryBondedMetaNodeCountResponse, error) {
	out := new(QueryBondedMetaNodeCountResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Query/BondedMetaNodeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RemainingOzoneLimit(ctx context.Context, in *QueryRemainingOzoneLimitRequest, opts ...grpc.CallOption) (*QueryRemainingOzoneLimitResponse, error) {
	out := new(QueryRemainingOzoneLimitResponse)
	err := c.cc.Invoke(ctx, "/stratos.register.v1.Query/RemainingOzoneLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ResourceNode queries ResourceNode info for given ResourceNode address.
	ResourceNode(context.Context, *QueryResourceNodeRequest) (*QueryResourceNodeResponse, error)
	// MetaNode queries MetaNode info for given MetaNode address.
	MetaNode(context.Context, *QueryMetaNodeRequest) (*QueryMetaNodeResponse, error)
	// Params queries Register module Params info.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// DepositByNode queries all deposit info for given node network address.
	DepositByNode(context.Context, *QueryDepositByNodeRequest) (*QueryDepositByNodeResponse, error)
	// DepositByOwner queries all deposit info for given owner address.
	DepositByOwner(context.Context, *QueryDepositByOwnerRequest) (*QueryDepositByOwnerResponse, error)
	// DepositTotal queries all deposit info.
	DepositTotal(context.Context, *QueryDepositTotalRequest) (*QueryDepositTotalResponse, error)
	// BondedResourceNodeCount queries total number of ResourceNodes.
	BondedResourceNodeCount(context.Context, *QueryBondedResourceNodeCountRequest) (*QueryBondedResourceNodeCountResponse, error)
	// BondedMetaNodeCount queries total number of MetaNodes.
	BondedMetaNodeCount(context.Context, *QueryBondedMetaNodeCountRequest) (*QueryBondedMetaNodeCountResponse, error)
	// RemainingOzoneLimit returns the current remaining ozone limit.
	RemainingOzoneLimit(context.Context, *QueryRemainingOzoneLimitRequest) (*QueryRemainingOzoneLimitResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ResourceNode(ctx context.Context, req *QueryResourceNodeRequest) (*QueryResourceNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceNode not implemented")
}
func (*UnimplementedQueryServer) MetaNode(ctx context.Context, req *QueryMetaNodeRequest) (*QueryMetaNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetaNode not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) DepositByNode(ctx context.Context, req *QueryDepositByNodeRequest) (*QueryDepositByNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositByNode not implemented")
}
func (*UnimplementedQueryServer) DepositByOwner(ctx context.Context, req *QueryDepositByOwnerRequest) (*QueryDepositByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositByOwner not implemented")
}
func (*UnimplementedQueryServer) DepositTotal(ctx context.Context, req *QueryDepositTotalRequest) (*QueryDepositTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositTotal not implemented")
}
func (*UnimplementedQueryServer) BondedResourceNodeCount(ctx context.Context, req *QueryBondedResourceNodeCountRequest) (*QueryBondedResourceNodeCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BondedResourceNodeCount not implemented")
}
func (*UnimplementedQueryServer) BondedMetaNodeCount(ctx context.Context, req *QueryBondedMetaNodeCountRequest) (*QueryBondedMetaNodeCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BondedMetaNodeCount not implemented")
}
func (*UnimplementedQueryServer) RemainingOzoneLimit(ctx context.Context, req *QueryRemainingOzoneLimitRequest) (*QueryRemainingOzoneLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemainingOzoneLimit not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ResourceNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryResourceNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ResourceNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Query/ResourceNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ResourceNode(ctx, req.(*QueryResourceNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MetaNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMetaNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MetaNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Query/MetaNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MetaNode(ctx, req.(*QueryMetaNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositByNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositByNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositByNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Query/DepositByNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositByNode(ctx, req.(*QueryDepositByNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Query/DepositByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositByOwner(ctx, req.(*QueryDepositByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Query/DepositTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositTotal(ctx, req.(*QueryDepositTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BondedResourceNodeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBondedResourceNodeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BondedResourceNodeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Query/BondedResourceNodeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BondedResourceNodeCount(ctx, req.(*QueryBondedResourceNodeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BondedMetaNodeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBondedMetaNodeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BondedMetaNodeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Query/BondedMetaNodeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BondedMetaNodeCount(ctx, req.(*QueryBondedMetaNodeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RemainingOzoneLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRemainingOzoneLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RemainingOzoneLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.register.v1.Query/RemainingOzoneLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RemainingOzoneLimit(ctx, req.(*QueryRemainingOzoneLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratos.register.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResourceNode",
			Handler:    _Query_ResourceNode_Handler,
		},
		{
			MethodName: "MetaNode",
			Handler:    _Query_MetaNode_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "DepositByNode",
			Handler:    _Query_DepositByNode_Handler,
		},
		{
			MethodName: "DepositByOwner",
			Handler:    _Query_DepositByOwner_Handler,
		},
		{
			MethodName: "DepositTotal",
			Handler:    _Query_DepositTotal_Handler,
		},
		{
			MethodName: "BondedResourceNodeCount",
			Handler:    _Query_BondedResourceNodeCount_Handler,
		},
		{
			MethodName: "BondedMetaNodeCount",
			Handler:    _Query_BondedMetaNodeCount_Handler,
		},
		{
			MethodName: "RemainingOzoneLimit",
			Handler:    _Query_RemainingOzoneLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stratos/register/v1/query.proto",
}

func (m *QueryResourceNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResourceNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResourceNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NetworkAddr) > 0 {
		i -= len(m.NetworkAddr)
		copy(dAtA[i:], m.NetworkAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NetworkAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryResourceNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResourceNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResourceNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMetaNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMetaNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMetaNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NetworkAddr) > 0 {
		i -= len(m.NetworkAddr)
		copy(dAtA[i:], m.NetworkAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NetworkAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMetaNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMetaNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMetaNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositByNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositByNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositByNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NetworkAddr) > 0 {
		i -= len(m.NetworkAddr)
		copy(dAtA[i:], m.NetworkAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NetworkAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositByNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositByNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositByNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DepositInfo != nil {
		{
			size, err := m.DepositInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddr) > 0 {
		i -= len(m.OwnerAddr)
		copy(dAtA[i:], m.OwnerAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OwnerAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepositInfos) > 0 {
		for iNdEx := len(m.DepositInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositTotalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositTotalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositTotalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDepositTotalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositTotalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositTotalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalUnbondingDeposit != nil {
		{
			size, err := m.TotalUnbondingDeposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TotalUnbondedDeposit != nil {
		{
			size, err := m.TotalUnbondedDeposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TotalBondedDeposit != nil {
		{
			size, err := m.TotalBondedDeposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MetaNodesTotalDeposit != nil {
		{
			size, err := m.MetaNodesTotalDeposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ResourceNodesTotalDeposit != nil {
		{
			size, err := m.ResourceNodesTotalDeposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBondedResourceNodeCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBondedResourceNodeCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBondedResourceNodeCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBondedResourceNodeCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBondedResourceNodeCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBondedResourceNodeCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBondedMetaNodeCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBondedMetaNodeCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBondedMetaNodeCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBondedMetaNodeCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBondedMetaNodeCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBondedMetaNodeCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRemainingOzoneLimitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRemainingOzoneLimitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRemainingOzoneLimitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRemainingOzoneLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRemainingOzoneLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRemainingOzoneLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.OzoneLimit.Size()
		i -= size
		if _, err := m.OzoneLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DepositInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UnBondedDeposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.UnBondingDeposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.BondedDeposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.NodeType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NodeType))
		i--
		dAtA[i] = 0x48
	}
	n15, err15 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime):])
	if err15 != nil {
		return 0, err15
	}
	i -= n15
	i = encodeVarintQuery(dAtA, i, uint64(n15))
	i--
	dAtA[i] = 0x42
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.Tokens.Size()
		i -= size
		if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Suspend {
		i--
		if m.Suspend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NetworkAddress) > 0 {
		i -= len(m.NetworkAddress)
		copy(dAtA[i:], m.NetworkAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NetworkAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryResourceNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryResourceNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMetaNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMetaNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepositByNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.QueryType != 0 {
		n += 1 + sovQuery(uint64(m.QueryType))
	}
	return n
}

func (m *QueryDepositByNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DepositInfo != nil {
		l = m.DepositInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepositByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepositByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DepositInfos) > 0 {
		for _, e := range m.DepositInfos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepositTotalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDepositTotalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceNodesTotalDeposit != nil {
		l = m.ResourceNodesTotalDeposit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MetaNodesTotalDeposit != nil {
		l = m.MetaNodesTotalDeposit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TotalBondedDeposit != nil {
		l = m.TotalBondedDeposit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TotalUnbondedDeposit != nil {
		l = m.TotalUnbondedDeposit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TotalUnbondingDeposit != nil {
		l = m.TotalUnbondingDeposit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBondedResourceNodeCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBondedResourceNodeCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovQuery(uint64(m.Number))
	}
	return n
}

func (m *QueryBondedMetaNodeCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBondedMetaNodeCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovQuery(uint64(m.Number))
	}
	return n
}

func (m *QueryRemainingOzoneLimitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRemainingOzoneLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OzoneLimit.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *DepositInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Suspend {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	l = m.Tokens.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Description.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime)
	n += 1 + l + sovQuery(uint64(l))
	if m.NodeType != 0 {
		n += 1 + sovQuery(uint64(m.NodeType))
	}
	l = m.BondedDeposit.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.UnBondingDeposit.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.UnBondedDeposit.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryResourceNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResourceNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResourceNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResourceNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResourceNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResourceNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &ResourceNode{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMetaNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMetaNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMetaNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMetaNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMetaNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMetaNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &MetaNode{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositByNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositByNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositByNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryType", wireType)
			}
			m.QueryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositByNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositByNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositByNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DepositInfo == nil {
				m.DepositInfo = &DepositInfo{}
			}
			if err := m.DepositInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositInfos = append(m.DepositInfos, &DepositInfo{})
			if err := m.DepositInfos[len(m.DepositInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositTotalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositTotalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositTotalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositTotalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositTotalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositTotalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceNodesTotalDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceNodesTotalDeposit == nil {
				m.ResourceNodesTotalDeposit = &types.Coin{}
			}
			if err := m.ResourceNodesTotalDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaNodesTotalDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetaNodesTotalDeposit == nil {
				m.MetaNodesTotalDeposit = &types.Coin{}
			}
			if err := m.MetaNodesTotalDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBondedDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalBondedDeposit == nil {
				m.TotalBondedDeposit = &types.Coin{}
			}
			if err := m.TotalBondedDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUnbondedDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalUnbondedDeposit == nil {
				m.TotalUnbondedDeposit = &types.Coin{}
			}
			if err := m.TotalUnbondedDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUnbondingDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalUnbondingDeposit == nil {
				m.TotalUnbondingDeposit = &types.Coin{}
			}
			if err := m.TotalUnbondingDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBondedResourceNodeCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBondedResourceNodeCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBondedResourceNodeCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBondedResourceNodeCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBondedResourceNodeCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBondedResourceNodeCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBondedMetaNodeCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBondedMetaNodeCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBondedMetaNodeCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBondedMetaNodeCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBondedMetaNodeCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBondedMetaNodeCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRemainingOzoneLimitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRemainingOzoneLimitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRemainingOzoneLimitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRemainingOzoneLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRemainingOzoneLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRemainingOzoneLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OzoneLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OzoneLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types1.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suspend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Suspend = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types2.BondStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			m.NodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondedDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnBondingDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnBondingDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnBondedDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnBondedDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
