// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stratos/pot/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the register module's genesis state.
type GenesisState struct {
	Params               Params                                 `protobuf:"bytes,1,opt,name=params,proto3" json:"params" yaml:"params"`
	TotalMinedToken      types.Coin                             `protobuf:"bytes,2,opt,name=total_mined_token,json=totalMinedToken,proto3" json:"total_mined_token" yaml:"total_mined_token"`
	LastDistributedEpoch github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=last_distributed_epoch,json=lastDistributedEpoch,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"last_distributed_epoch" yaml:"last_distributed_epoch"`
	ImmatureTotalInfo    []ImmatureTotal                        `protobuf:"bytes,4,rep,name=immature_total_info,json=immatureTotalInfo,proto3" json:"immature_total_info" yaml:"immature_total_info"`
	MatureTotalInfo      []MatureTotal                          `protobuf:"bytes,5,rep,name=mature_total_info,json=matureTotalInfo,proto3" json:"mature_total_info" yaml:"mature_total_info"`
	IndividualRewardInfo []Reward                               `protobuf:"bytes,6,rep,name=individual_reward_info,json=individualRewardInfo,proto3" json:"individual_reward_info" yaml:"individual_reward_info"`
	MaturedEpoch         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=matured_epoch,json=maturedEpoch,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"matured_epoch" yaml:"matured_epoch"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_abdde08c2564316a, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetTotalMinedToken() types.Coin {
	if m != nil {
		return m.TotalMinedToken
	}
	return types.Coin{}
}

func (m *GenesisState) GetImmatureTotalInfo() []ImmatureTotal {
	if m != nil {
		return m.ImmatureTotalInfo
	}
	return nil
}

func (m *GenesisState) GetMatureTotalInfo() []MatureTotal {
	if m != nil {
		return m.MatureTotalInfo
	}
	return nil
}

func (m *GenesisState) GetIndividualRewardInfo() []Reward {
	if m != nil {
		return m.IndividualRewardInfo
	}
	return nil
}

type ImmatureTotal struct {
	WalletAddress string                                   `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address" yaml:"wallet_address"`
	Value         github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=value,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"value" yaml:"value"`
}

func (m *ImmatureTotal) Reset()         { *m = ImmatureTotal{} }
func (m *ImmatureTotal) String() string { return proto.CompactTextString(m) }
func (*ImmatureTotal) ProtoMessage()    {}
func (*ImmatureTotal) Descriptor() ([]byte, []int) {
	return fileDescriptor_abdde08c2564316a, []int{1}
}
func (m *ImmatureTotal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImmatureTotal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImmatureTotal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImmatureTotal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImmatureTotal.Merge(m, src)
}
func (m *ImmatureTotal) XXX_Size() int {
	return m.Size()
}
func (m *ImmatureTotal) XXX_DiscardUnknown() {
	xxx_messageInfo_ImmatureTotal.DiscardUnknown(m)
}

var xxx_messageInfo_ImmatureTotal proto.InternalMessageInfo

func (m *ImmatureTotal) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *ImmatureTotal) GetValue() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Value
	}
	return nil
}

type MatureTotal struct {
	WalletAddress string                                   `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address" yaml:"wallet_address"`
	Value         github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=value,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"value" yaml:"value"`
}

func (m *MatureTotal) Reset()         { *m = MatureTotal{} }
func (m *MatureTotal) String() string { return proto.CompactTextString(m) }
func (*MatureTotal) ProtoMessage()    {}
func (*MatureTotal) Descriptor() ([]byte, []int) {
	return fileDescriptor_abdde08c2564316a, []int{2}
}
func (m *MatureTotal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatureTotal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatureTotal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatureTotal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatureTotal.Merge(m, src)
}
func (m *MatureTotal) XXX_Size() int {
	return m.Size()
}
func (m *MatureTotal) XXX_DiscardUnknown() {
	xxx_messageInfo_MatureTotal.DiscardUnknown(m)
}

var xxx_messageInfo_MatureTotal proto.InternalMessageInfo

func (m *MatureTotal) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *MatureTotal) GetValue() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "stratos.pot.v1.GenesisState")
	proto.RegisterType((*ImmatureTotal)(nil), "stratos.pot.v1.ImmatureTotal")
	proto.RegisterType((*MatureTotal)(nil), "stratos.pot.v1.MatureTotal")
}

func init() { proto.RegisterFile("stratos/pot/v1/genesis.proto", fileDescriptor_abdde08c2564316a) }

var fileDescriptor_abdde08c2564316a = []byte{
	// 694 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x95, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0xc7, 0x3b, 0x20, 0x10, 0x06, 0x0a, 0xe9, 0x5a, 0x49, 0x41, 0xd9, 0x25, 0x8d, 0x31, 0x8d,
	0x09, 0xbb, 0x29, 0xde, 0x38, 0x98, 0xb8, 0x60, 0x4c, 0x0f, 0x4d, 0x4c, 0xe1, 0xe4, 0x65, 0x33,
	0xed, 0x0e, 0x65, 0x60, 0x77, 0xa6, 0xd9, 0x99, 0x16, 0x31, 0x5e, 0x8c, 0x67, 0xa3, 0xf1, 0xaf,
	0x20, 0x9e, 0x8c, 0xf1, 0x8f, 0xe0, 0x48, 0x3c, 0x19, 0x0e, 0xab, 0x29, 0x07, 0x13, 0x8e, 0x9b,
	0x18, 0xaf, 0x66, 0x67, 0x06, 0xe9, 0x2f, 0x88, 0x9e, 0xbd, 0xb4, 0x3b, 0xef, 0xfb, 0xdd, 0xf7,
	0x3e, 0x33, 0xef, 0x4d, 0x16, 0xde, 0xe1, 0x22, 0x42, 0x82, 0x71, 0xa7, 0xc5, 0x84, 0xd3, 0x29,
	0x3b, 0x4d, 0x4c, 0x31, 0x27, 0xdc, 0x6e, 0x45, 0x4c, 0x30, 0x63, 0x4e, 0xab, 0x76, 0x8b, 0x09,
	0xbb, 0x53, 0x5e, 0xca, 0x37, 0x59, 0x93, 0x49, 0xc9, 0x49, 0x9f, 0x94, 0x6b, 0x69, 0xb1, 0xc1,
	0x78, 0xc8, 0xb8, 0xa7, 0x04, 0xb5, 0xd0, 0x52, 0x0e, 0x85, 0x84, 0x32, 0x47, 0xfe, 0xea, 0x90,
	0xa9, 0x0c, 0x4e, 0x1d, 0x71, 0xec, 0x74, 0xca, 0x75, 0x2c, 0x50, 0xd9, 0x69, 0x30, 0x42, 0xb5,
	0x5e, 0x18, 0x20, 0x4a, 0x4b, 0x4b, 0xa5, 0x78, 0x3a, 0x05, 0x67, 0x9f, 0x28, 0xbe, 0x2d, 0x81,
	0x04, 0x36, 0xb6, 0xe1, 0x64, 0x0b, 0x45, 0x28, 0xe4, 0x05, 0xb0, 0x02, 0x4a, 0x33, 0x6b, 0x0b,
	0x76, 0x3f, 0xaf, 0xfd, 0x54, 0xaa, 0xee, 0xdd, 0xe3, 0xd8, 0xca, 0x9c, 0xc7, 0x96, 0x76, 0x27,
	0xb1, 0x95, 0x3d, 0x44, 0x61, 0xb0, 0x5e, 0x54, 0xeb, 0xe2, 0xd1, 0x8f, 0x8f, 0xf7, 0x41, 0x4d,
	0xab, 0xc6, 0x2b, 0x00, 0x73, 0x82, 0x09, 0x14, 0x78, 0x21, 0xa1, 0xd8, 0xf7, 0x04, 0xdb, 0xc7,
	0xb4, 0x30, 0x26, 0x2b, 0x2c, 0xda, 0x7a, 0x7b, 0x29, 0xbd, 0xad, 0xe9, 0xed, 0x0d, 0x46, 0xa8,
	0xbb, 0xae, 0x8b, 0x0c, 0xbf, 0x9b, 0xc4, 0x56, 0x41, 0xd5, 0x1b, 0x92, 0x74, 0xe9, 0x79, 0x29,
	0x54, 0xd3, 0xf8, 0x76, 0x1a, 0x36, 0x3e, 0x01, 0xb8, 0x10, 0x20, 0x2e, 0x3c, 0x9f, 0x70, 0x11,
	0x91, 0x7a, 0x5b, 0x60, 0xdf, 0xc3, 0x2d, 0xd6, 0xd8, 0x2d, 0x8c, 0xaf, 0x80, 0xd2, 0xb4, 0xfb,
	0x32, 0xad, 0x76, 0x1a, 0x5b, 0xf7, 0x9a, 0x44, 0xec, 0xb6, 0xeb, 0x76, 0x83, 0x85, 0xfa, 0xe4,
	0xf5, 0xdf, 0x2a, 0xf7, 0xf7, 0x1d, 0x71, 0xd8, 0xc2, 0xdc, 0xae, 0x50, 0x71, 0x1e, 0x5b, 0x57,
	0xe4, 0x4b, 0x62, 0x6b, 0x59, 0xc1, 0x8d, 0xd6, 0x8b, 0x5f, 0x3e, 0xaf, 0x42, 0xbd, 0xe9, 0x0a,
	0x15, 0x8a, 0x37, 0x9f, 0x7a, 0x37, 0x2f, 0xad, 0x8f, 0x53, 0xa7, 0xf1, 0x06, 0xc0, 0x9b, 0x24,
	0x0c, 0x91, 0x68, 0x47, 0xd8, 0x53, 0x5b, 0x25, 0x74, 0x87, 0x15, 0x6e, 0xac, 0x8c, 0x97, 0x66,
	0xd6, 0x96, 0x07, 0x9b, 0x53, 0xd1, 0xd6, 0xed, 0xd4, 0xe9, 0x3e, 0xd4, 0xc7, 0x37, 0x2a, 0x43,
	0x12, 0x5b, 0x4b, 0x8a, 0x71, 0x84, 0xa8, 0x8f, 0x30, 0x47, 0x7a, 0xd3, 0x55, 0xe8, 0x0e, 0x33,
	0x5e, 0x03, 0x98, 0x1b, 0xa6, 0x99, 0x90, 0x34, 0xb7, 0x07, 0x69, 0xaa, 0x3d, 0x2c, 0x7f, 0x5a,
	0x39, 0x8a, 0x44, 0xb7, 0xf2, 0x2a, 0x8e, 0xf9, 0x41, 0x8a, 0xf7, 0x00, 0x2e, 0x10, 0xea, 0x93,
	0x0e, 0xf1, 0xdb, 0x28, 0xf0, 0x22, 0x7c, 0x80, 0x22, 0x5f, 0xa1, 0x4c, 0x4a, 0x94, 0xa1, 0xa9,
	0xad, 0x49, 0x8b, 0xbb, 0xa9, 0x29, 0xae, 0x78, 0xfb, 0xb2, 0x71, 0xa3, 0x75, 0xcd, 0x93, 0xbf,
	0x54, 0x55, 0x5e, 0x09, 0xf5, 0x16, 0xc0, 0xac, 0x02, 0xbd, 0x18, 0xab, 0x29, 0x39, 0x56, 0x7b,
	0xff, 0x3c, 0x56, 0xfd, 0x69, 0x92, 0xd8, 0xca, 0xf7, 0x9e, 0xcf, 0x75, 0x43, 0x34, 0xab, 0x2d,
	0x72, 0x78, 0x8a, 0xbf, 0x00, 0xcc, 0xf6, 0x4d, 0x84, 0xb1, 0x07, 0xe7, 0x0e, 0x50, 0x10, 0x60,
	0xe1, 0x21, 0xdf, 0x8f, 0x30, 0x57, 0xb7, 0x7c, 0xda, 0xdd, 0x38, 0x8f, 0xad, 0x01, 0x25, 0x89,
	0xad, 0x5b, 0xaa, 0x6c, 0x7f, 0x3c, 0xad, 0x9b, 0xd7, 0x75, 0x1f, 0xa9, 0xd0, 0x96, 0x88, 0x08,
	0x6d, 0xd6, 0xb2, 0xca, 0xa8, 0x83, 0xc6, 0x0b, 0x38, 0xd1, 0x41, 0x41, 0x1b, 0x17, 0xc6, 0x64,
	0x4b, 0xae, 0xb9, 0xe6, 0x15, 0xdd, 0x15, 0xe5, 0x4f, 0x62, 0x6b, 0x56, 0x15, 0x96, 0xcb, 0xe2,
	0x87, 0x6f, 0x56, 0xe9, 0x2f, 0x8e, 0x2e, 0xcd, 0xc4, 0x6b, 0x2a, 0x45, 0xf1, 0x27, 0x80, 0x33,
	0xd5, 0xff, 0x6f, 0xdf, 0x6e, 0xf5, 0xa8, 0x6b, 0x82, 0xe3, 0xae, 0x09, 0x4e, 0xba, 0x26, 0xf8,
	0xde, 0x35, 0xc1, 0xbb, 0x33, 0x33, 0x73, 0x72, 0x66, 0x66, 0xbe, 0x9e, 0x99, 0x99, 0x67, 0x4e,
	0x4f, 0x3a, 0x7d, 0x3f, 0x28, 0x16, 0x17, 0x8f, 0xab, 0x8d, 0x5d, 0x44, 0xa8, 0xf3, 0x5c, 0x7e,
	0x24, 0x64, 0xee, 0xfa, 0xa4, 0xfc, 0x48, 0x3c, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xaf,
	0xd1, 0xbd, 0xd2, 0x06, 0x00, 0x00,
}

func (this *GenesisState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenesisState)
	if !ok {
		that2, ok := that.(GenesisState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Params.Equal(&that1.Params) {
		return false
	}
	if !this.TotalMinedToken.Equal(&that1.TotalMinedToken) {
		return false
	}
	if !this.LastDistributedEpoch.Equal(that1.LastDistributedEpoch) {
		return false
	}
	if len(this.ImmatureTotalInfo) != len(that1.ImmatureTotalInfo) {
		return false
	}
	for i := range this.ImmatureTotalInfo {
		if !this.ImmatureTotalInfo[i].Equal(&that1.ImmatureTotalInfo[i]) {
			return false
		}
	}
	if len(this.MatureTotalInfo) != len(that1.MatureTotalInfo) {
		return false
	}
	for i := range this.MatureTotalInfo {
		if !this.MatureTotalInfo[i].Equal(&that1.MatureTotalInfo[i]) {
			return false
		}
	}
	if len(this.IndividualRewardInfo) != len(that1.IndividualRewardInfo) {
		return false
	}
	for i := range this.IndividualRewardInfo {
		if !this.IndividualRewardInfo[i].Equal(&that1.IndividualRewardInfo[i]) {
			return false
		}
	}
	if !this.MaturedEpoch.Equal(that1.MaturedEpoch) {
		return false
	}
	return true
}
func (this *ImmatureTotal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImmatureTotal)
	if !ok {
		that2, ok := that.(ImmatureTotal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WalletAddress != that1.WalletAddress {
		return false
	}
	if len(this.Value) != len(that1.Value) {
		return false
	}
	for i := range this.Value {
		if !this.Value[i].Equal(&that1.Value[i]) {
			return false
		}
	}
	return true
}
func (this *MatureTotal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatureTotal)
	if !ok {
		that2, ok := that.(MatureTotal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WalletAddress != that1.WalletAddress {
		return false
	}
	if len(this.Value) != len(that1.Value) {
		return false
	}
	for i := range this.Value {
		if !this.Value[i].Equal(&that1.Value[i]) {
			return false
		}
	}
	return true
}
func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaturedEpoch.Size()
		i -= size
		if _, err := m.MaturedEpoch.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.IndividualRewardInfo) > 0 {
		for iNdEx := len(m.IndividualRewardInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IndividualRewardInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.MatureTotalInfo) > 0 {
		for iNdEx := len(m.MatureTotalInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MatureTotalInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ImmatureTotalInfo) > 0 {
		for iNdEx := len(m.ImmatureTotalInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ImmatureTotalInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.LastDistributedEpoch.Size()
		i -= size
		if _, err := m.LastDistributedEpoch.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.TotalMinedToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ImmatureTotal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImmatureTotal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImmatureTotal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Value[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MatureTotal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatureTotal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatureTotal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Value[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.TotalMinedToken.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.LastDistributedEpoch.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.ImmatureTotalInfo) > 0 {
		for _, e := range m.ImmatureTotalInfo {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.MatureTotalInfo) > 0 {
		for _, e := range m.MatureTotalInfo {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.IndividualRewardInfo) > 0 {
		for _, e := range m.IndividualRewardInfo {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.MaturedEpoch.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *ImmatureTotal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *MatureTotal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMinedToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalMinedToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDistributedEpoch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastDistributedEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmatureTotalInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImmatureTotalInfo = append(m.ImmatureTotalInfo, ImmatureTotal{})
			if err := m.ImmatureTotalInfo[len(m.ImmatureTotalInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatureTotalInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatureTotalInfo = append(m.MatureTotalInfo, MatureTotal{})
			if err := m.MatureTotalInfo[len(m.MatureTotalInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndividualRewardInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndividualRewardInfo = append(m.IndividualRewardInfo, Reward{})
			if err := m.IndividualRewardInfo[len(m.IndividualRewardInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturedEpoch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaturedEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImmatureTotal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImmatureTotal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImmatureTotal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, types.Coin{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatureTotal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatureTotal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatureTotal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, types.Coin{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
