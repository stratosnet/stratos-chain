// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: stratos/pot/v1/query.proto

package potv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_VolumeReport_FullMethodName       = "/stratos.pot.v1.Query/VolumeReport"
	Query_RewardsByEpoch_FullMethodName     = "/stratos.pot.v1.Query/RewardsByEpoch"
	Query_RewardsByOwner_FullMethodName     = "/stratos.pot.v1.Query/RewardsByOwner"
	Query_SlashingByOwner_FullMethodName    = "/stratos.pot.v1.Query/SlashingByOwner"
	Query_Params_FullMethodName             = "/stratos.pot.v1.Query/Params"
	Query_TotalMinedToken_FullMethodName    = "/stratos.pot.v1.Query/TotalMinedToken"
	Query_CirculationSupply_FullMethodName  = "/stratos.pot.v1.Query/CirculationSupply"
	Query_TotalRewardByEpoch_FullMethodName = "/stratos.pot.v1.Query/TotalRewardByEpoch"
	Query_Metrics_FullMethodName            = "/stratos.pot.v1.Query/Metrics"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// VolumeReport queries VolumeReport info for given epoch.
	VolumeReport(ctx context.Context, in *QueryVolumeReportRequest, opts ...grpc.CallOption) (*QueryVolumeReportResponse, error)
	// RewardsByEpoch queries Pot rewards by a given epoch.
	RewardsByEpoch(ctx context.Context, in *QueryRewardsByEpochRequest, opts ...grpc.CallOption) (*QueryRewardsByEpochResponse, error)
	// RewardsByOwner queries Pot rewards by a given owner wallet address.
	RewardsByOwner(ctx context.Context, in *QueryRewardsByOwnerRequest, opts ...grpc.CallOption) (*QueryRewardsByOwnerResponse, error)
	// SlashingByOwner queries Pot slashing by owner wallet address.
	SlashingByOwner(ctx context.Context, in *QuerySlashingByOwnerRequest, opts ...grpc.CallOption) (*QuerySlashingByOwnerResponse, error)
	// Params queries POT module Params info.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	TotalMinedToken(ctx context.Context, in *QueryTotalMinedTokenRequest, opts ...grpc.CallOption) (*QueryTotalMinedTokenResponse, error)
	CirculationSupply(ctx context.Context, in *QueryCirculationSupplyRequest, opts ...grpc.CallOption) (*QueryCirculationSupplyResponse, error)
	TotalRewardByEpoch(ctx context.Context, in *QueryTotalRewardByEpochRequest, opts ...grpc.CallOption) (*QueryTotalRewardByEpochResponse, error)
	Metrics(ctx context.Context, in *QueryMetricsRequest, opts ...grpc.CallOption) (*QueryMetricsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) VolumeReport(ctx context.Context, in *QueryVolumeReportRequest, opts ...grpc.CallOption) (*QueryVolumeReportResponse, error) {
	out := new(QueryVolumeReportResponse)
	err := c.cc.Invoke(ctx, Query_VolumeReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsByEpoch(ctx context.Context, in *QueryRewardsByEpochRequest, opts ...grpc.CallOption) (*QueryRewardsByEpochResponse, error) {
	out := new(QueryRewardsByEpochResponse)
	err := c.cc.Invoke(ctx, Query_RewardsByEpoch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsByOwner(ctx context.Context, in *QueryRewardsByOwnerRequest, opts ...grpc.CallOption) (*QueryRewardsByOwnerResponse, error) {
	out := new(QueryRewardsByOwnerResponse)
	err := c.cc.Invoke(ctx, Query_RewardsByOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SlashingByOwner(ctx context.Context, in *QuerySlashingByOwnerRequest, opts ...grpc.CallOption) (*QuerySlashingByOwnerResponse, error) {
	out := new(QuerySlashingByOwnerResponse)
	err := c.cc.Invoke(ctx, Query_SlashingByOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalMinedToken(ctx context.Context, in *QueryTotalMinedTokenRequest, opts ...grpc.CallOption) (*QueryTotalMinedTokenResponse, error) {
	out := new(QueryTotalMinedTokenResponse)
	err := c.cc.Invoke(ctx, Query_TotalMinedToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CirculationSupply(ctx context.Context, in *QueryCirculationSupplyRequest, opts ...grpc.CallOption) (*QueryCirculationSupplyResponse, error) {
	out := new(QueryCirculationSupplyResponse)
	err := c.cc.Invoke(ctx, Query_CirculationSupply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalRewardByEpoch(ctx context.Context, in *QueryTotalRewardByEpochRequest, opts ...grpc.CallOption) (*QueryTotalRewardByEpochResponse, error) {
	out := new(QueryTotalRewardByEpochResponse)
	err := c.cc.Invoke(ctx, Query_TotalRewardByEpoch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Metrics(ctx context.Context, in *QueryMetricsRequest, opts ...grpc.CallOption) (*QueryMetricsResponse, error) {
	out := new(QueryMetricsResponse)
	err := c.cc.Invoke(ctx, Query_Metrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// VolumeReport queries VolumeReport info for given epoch.
	VolumeReport(context.Context, *QueryVolumeReportRequest) (*QueryVolumeReportResponse, error)
	// RewardsByEpoch queries Pot rewards by a given epoch.
	RewardsByEpoch(context.Context, *QueryRewardsByEpochRequest) (*QueryRewardsByEpochResponse, error)
	// RewardsByOwner queries Pot rewards by a given owner wallet address.
	RewardsByOwner(context.Context, *QueryRewardsByOwnerRequest) (*QueryRewardsByOwnerResponse, error)
	// SlashingByOwner queries Pot slashing by owner wallet address.
	SlashingByOwner(context.Context, *QuerySlashingByOwnerRequest) (*QuerySlashingByOwnerResponse, error)
	// Params queries POT module Params info.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	TotalMinedToken(context.Context, *QueryTotalMinedTokenRequest) (*QueryTotalMinedTokenResponse, error)
	CirculationSupply(context.Context, *QueryCirculationSupplyRequest) (*QueryCirculationSupplyResponse, error)
	TotalRewardByEpoch(context.Context, *QueryTotalRewardByEpochRequest) (*QueryTotalRewardByEpochResponse, error)
	Metrics(context.Context, *QueryMetricsRequest) (*QueryMetricsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) VolumeReport(context.Context, *QueryVolumeReportRequest) (*QueryVolumeReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeReport not implemented")
}
func (UnimplementedQueryServer) RewardsByEpoch(context.Context, *QueryRewardsByEpochRequest) (*QueryRewardsByEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsByEpoch not implemented")
}
func (UnimplementedQueryServer) RewardsByOwner(context.Context, *QueryRewardsByOwnerRequest) (*QueryRewardsByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsByOwner not implemented")
}
func (UnimplementedQueryServer) SlashingByOwner(context.Context, *QuerySlashingByOwnerRequest) (*QuerySlashingByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlashingByOwner not implemented")
}
func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) TotalMinedToken(context.Context, *QueryTotalMinedTokenRequest) (*QueryTotalMinedTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalMinedToken not implemented")
}
func (UnimplementedQueryServer) CirculationSupply(context.Context, *QueryCirculationSupplyRequest) (*QueryCirculationSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CirculationSupply not implemented")
}
func (UnimplementedQueryServer) TotalRewardByEpoch(context.Context, *QueryTotalRewardByEpochRequest) (*QueryTotalRewardByEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalRewardByEpoch not implemented")
}
func (UnimplementedQueryServer) Metrics(context.Context, *QueryMetricsRequest) (*QueryMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metrics not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_VolumeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVolumeReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VolumeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_VolumeReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VolumeReport(ctx, req.(*QueryVolumeReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsByEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsByEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsByEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RewardsByEpoch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsByEpoch(ctx, req.(*QueryRewardsByEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RewardsByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsByOwner(ctx, req.(*QueryRewardsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SlashingByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySlashingByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SlashingByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SlashingByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SlashingByOwner(ctx, req.(*QuerySlashingByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalMinedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalMinedTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalMinedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TotalMinedToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalMinedToken(ctx, req.(*QueryTotalMinedTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CirculationSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCirculationSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CirculationSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CirculationSupply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CirculationSupply(ctx, req.(*QueryCirculationSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalRewardByEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalRewardByEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalRewardByEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TotalRewardByEpoch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalRewardByEpoch(ctx, req.(*QueryTotalRewardByEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Metrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Metrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Metrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Metrics(ctx, req.(*QueryMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stratos.pot.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VolumeReport",
			Handler:    _Query_VolumeReport_Handler,
		},
		{
			MethodName: "RewardsByEpoch",
			Handler:    _Query_RewardsByEpoch_Handler,
		},
		{
			MethodName: "RewardsByOwner",
			Handler:    _Query_RewardsByOwner_Handler,
		},
		{
			MethodName: "SlashingByOwner",
			Handler:    _Query_SlashingByOwner_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "TotalMinedToken",
			Handler:    _Query_TotalMinedToken_Handler,
		},
		{
			MethodName: "CirculationSupply",
			Handler:    _Query_CirculationSupply_Handler,
		},
		{
			MethodName: "TotalRewardByEpoch",
			Handler:    _Query_TotalRewardByEpoch_Handler,
		},
		{
			MethodName: "Metrics",
			Handler:    _Query_Metrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stratos/pot/v1/query.proto",
}
