// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: stratos/register/v1/query.proto

package registerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_ResourceNode_FullMethodName            = "/stratos.register.v1.Query/ResourceNode"
	Query_MetaNode_FullMethodName                = "/stratos.register.v1.Query/MetaNode"
	Query_Params_FullMethodName                  = "/stratos.register.v1.Query/Params"
	Query_DepositByNode_FullMethodName           = "/stratos.register.v1.Query/DepositByNode"
	Query_DepositByOwner_FullMethodName          = "/stratos.register.v1.Query/DepositByOwner"
	Query_DepositTotal_FullMethodName            = "/stratos.register.v1.Query/DepositTotal"
	Query_BondedResourceNodeCount_FullMethodName = "/stratos.register.v1.Query/BondedResourceNodeCount"
	Query_BondedMetaNodeCount_FullMethodName     = "/stratos.register.v1.Query/BondedMetaNodeCount"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// ResourceNode queries ResourceNode info for given ResourceNode address.
	ResourceNode(ctx context.Context, in *QueryResourceNodeRequest, opts ...grpc.CallOption) (*QueryResourceNodeResponse, error)
	// MetaNode queries MetaNode info for given MetaNode address.
	MetaNode(ctx context.Context, in *QueryMetaNodeRequest, opts ...grpc.CallOption) (*QueryMetaNodeResponse, error)
	// Params queries Register module Params info.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// DepositByNode queries all deposit info for given node network address.
	DepositByNode(ctx context.Context, in *QueryDepositByNodeRequest, opts ...grpc.CallOption) (*QueryDepositByNodeResponse, error)
	// DepositByOwner queries all deposit info for given owner address.
	DepositByOwner(ctx context.Context, in *QueryDepositByOwnerRequest, opts ...grpc.CallOption) (*QueryDepositByOwnerResponse, error)
	// DepositTotal queries all deposit info.
	DepositTotal(ctx context.Context, in *QueryDepositTotalRequest, opts ...grpc.CallOption) (*QueryDepositTotalResponse, error)
	// BondedResourceNodeCount queries total number of ResourceNodes.
	BondedResourceNodeCount(ctx context.Context, in *QueryBondedResourceNodeCountRequest, opts ...grpc.CallOption) (*QueryBondedResourceNodeCountResponse, error)
	// BondedMetaNodeCount queries total number of MetaNodes.
	BondedMetaNodeCount(ctx context.Context, in *QueryBondedMetaNodeCountRequest, opts ...grpc.CallOption) (*QueryBondedMetaNodeCountResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ResourceNode(ctx context.Context, in *QueryResourceNodeRequest, opts ...grpc.CallOption) (*QueryResourceNodeResponse, error) {
	out := new(QueryResourceNodeResponse)
	err := c.cc.Invoke(ctx, Query_ResourceNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MetaNode(ctx context.Context, in *QueryMetaNodeRequest, opts ...grpc.CallOption) (*QueryMetaNodeResponse, error) {
	out := new(QueryMetaNodeResponse)
	err := c.cc.Invoke(ctx, Query_MetaNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositByNode(ctx context.Context, in *QueryDepositByNodeRequest, opts ...grpc.CallOption) (*QueryDepositByNodeResponse, error) {
	out := new(QueryDepositByNodeResponse)
	err := c.cc.Invoke(ctx, Query_DepositByNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositByOwner(ctx context.Context, in *QueryDepositByOwnerRequest, opts ...grpc.CallOption) (*QueryDepositByOwnerResponse, error) {
	out := new(QueryDepositByOwnerResponse)
	err := c.cc.Invoke(ctx, Query_DepositByOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositTotal(ctx context.Context, in *QueryDepositTotalRequest, opts ...grpc.CallOption) (*QueryDepositTotalResponse, error) {
	out := new(QueryDepositTotalResponse)
	err := c.cc.Invoke(ctx, Query_DepositTotal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BondedResourceNodeCount(ctx context.Context, in *QueryBondedResourceNodeCountRequest, opts ...grpc.CallOption) (*QueryBondedResourceNodeCountResponse, error) {
	out := new(QueryBondedResourceNodeCountResponse)
	err := c.cc.Invoke(ctx, Query_BondedResourceNodeCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BondedMetaNodeCount(ctx context.Context, in *QueryBondedMetaNodeCountRequest, opts ...grpc.CallOption) (*QueryBondedMetaNodeCountResponse, error) {
	out := new(QueryBondedMetaNodeCountResponse)
	err := c.cc.Invoke(ctx, Query_BondedMetaNodeCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// ResourceNode queries ResourceNode info for given ResourceNode address.
	ResourceNode(context.Context, *QueryResourceNodeRequest) (*QueryResourceNodeResponse, error)
	// MetaNode queries MetaNode info for given MetaNode address.
	MetaNode(context.Context, *QueryMetaNodeRequest) (*QueryMetaNodeResponse, error)
	// Params queries Register module Params info.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// DepositByNode queries all deposit info for given node network address.
	DepositByNode(context.Context, *QueryDepositByNodeRequest) (*QueryDepositByNodeResponse, error)
	// DepositByOwner queries all deposit info for given owner address.
	DepositByOwner(context.Context, *QueryDepositByOwnerRequest) (*QueryDepositByOwnerResponse, error)
	// DepositTotal queries all deposit info.
	DepositTotal(context.Context, *QueryDepositTotalRequest) (*QueryDepositTotalResponse, error)
	// BondedResourceNodeCount queries total number of ResourceNodes.
	BondedResourceNodeCount(context.Context, *QueryBondedResourceNodeCountRequest) (*QueryBondedResourceNodeCountResponse, error)
	// BondedMetaNodeCount queries total number of MetaNodes.
	BondedMetaNodeCount(context.Context, *QueryBondedMetaNodeCountRequest) (*QueryBondedMetaNodeCountResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) ResourceNode(context.Context, *QueryResourceNodeRequest) (*QueryResourceNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceNode not implemented")
}
func (UnimplementedQueryServer) MetaNode(context.Context, *QueryMetaNodeRequest) (*QueryMetaNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetaNode not implemented")
}
func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) DepositByNode(context.Context, *QueryDepositByNodeRequest) (*QueryDepositByNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositByNode not implemented")
}
func (UnimplementedQueryServer) DepositByOwner(context.Context, *QueryDepositByOwnerRequest) (*QueryDepositByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositByOwner not implemented")
}
func (UnimplementedQueryServer) DepositTotal(context.Context, *QueryDepositTotalRequest) (*QueryDepositTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositTotal not implemented")
}
func (UnimplementedQueryServer) BondedResourceNodeCount(context.Context, *QueryBondedResourceNodeCountRequest) (*QueryBondedResourceNodeCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BondedResourceNodeCount not implemented")
}
func (UnimplementedQueryServer) BondedMetaNodeCount(context.Context, *QueryBondedMetaNodeCountRequest) (*QueryBondedMetaNodeCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BondedMetaNodeCount not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_ResourceNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryResourceNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ResourceNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ResourceNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ResourceNode(ctx, req.(*QueryResourceNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MetaNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMetaNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MetaNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MetaNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MetaNode(ctx, req.(*QueryMetaNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositByNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositByNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositByNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DepositByNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositByNode(ctx, req.(*QueryDepositByNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DepositByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositByOwner(ctx, req.(*QueryDepositByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DepositTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositTotal(ctx, req.(*QueryDepositTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BondedResourceNodeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBondedResourceNodeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BondedResourceNodeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BondedResourceNodeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BondedResourceNodeCount(ctx, req.(*QueryBondedResourceNodeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BondedMetaNodeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBondedMetaNodeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BondedMetaNodeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BondedMetaNodeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BondedMetaNodeCount(ctx, req.(*QueryBondedMetaNodeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stratos.register.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResourceNode",
			Handler:    _Query_ResourceNode_Handler,
		},
		{
			MethodName: "MetaNode",
			Handler:    _Query_MetaNode_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "DepositByNode",
			Handler:    _Query_DepositByNode_Handler,
		},
		{
			MethodName: "DepositByOwner",
			Handler:    _Query_DepositByOwner_Handler,
		},
		{
			MethodName: "DepositTotal",
			Handler:    _Query_DepositTotal_Handler,
		},
		{
			MethodName: "BondedResourceNodeCount",
			Handler:    _Query_BondedResourceNodeCount_Handler,
		},
		{
			MethodName: "BondedMetaNodeCount",
			Handler:    _Query_BondedMetaNodeCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stratos/register/v1/query.proto",
}
